


sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



NNNNAAAAMMMMEEEE
     _ssss_hhhh_,,,, _rrrr_ssss_hhhh_,,,, _kkkk_ssss_hhhh_,,,, _rrrr_kkkk_ssss_hhhh - a standard/restricted command and programming
     language

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
     _ssss_hhhh [ _----_aaaa_bbbb_CCCC_eeee_ffff_hhhh_iiii_kkkk_mmmm_nnnn_pppp_rrrr_ssss_tttt_uuuu_vvvv_xxxx ] [ _----_oooo _o_p_t_i_o_n ] ... [ _----_cccc _s_t_r_i_n_g ] [ _a_r_g ... ]

     ////uuuussssrrrr////lllliiiibbbb////rrrrsssshhhh  [ _----_aaaa_bbbb_CCCC_eeee_ffff_hhhh_iiii_kkkk_mmmm_nnnn_pppp_rrrr_ssss_tttt_uuuu_vvvv_xxxx ] [ _----_oooo _o_p_t_i_o_n ] ... [ _----_cccc _s_t_r_i_n_g ]
          [ _a_r_g ... ]

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     NNNNooootttteeee:::: As of IRIX 6.4, _ssss_hhhh is the Korn shell rather than the Bourne shell.
     See _bbbb_ssss_hhhh(1) for the Bourne Shell description.  See the CCCCOOOOMMMMPPPPAAAATTTTIIIIBBBBIIIILLLLIIIITTTTYYYY
     IIIISSSSSSSSUUUUEEEESSSS section below for more detail.

     This is the internationalized _ssss_hhhh. See the _IIII_NNNN_TTTT_EEEE_RRRR_NNNN_AAAA_TTTT_IIII_OOOO_NNNN_AAAA_LLLL_IIII_ZZZZ_AAAA_TTTT_IIII_OOOO_NNNN section
     below for more detail.

     _ssss_hhhh is a command and programming language that executes commands read from
     a terminal or a file.  _////_uuuu_ssss_rrrr_////_llll_iiii_bbbb_////_rrrr_ssss_hhhh (also invoked as _rrrr_kkkk_ssss_hhhh) is a
     restricted version of the standard command interpreter _ssss_hhhh; it is used to
     set up login names and execution environments whose capabilities are more
     controlled than those of the standard shell.  See IIIInnnnvvvvooooccccaaaattttiiiioooonnnn below for
     the meaning of arguments to the shell.

   DDDDeeeeffffiiiinnnniiiittttiiiioooonnnnssss
     A _m_e_t_a_c_h_a_r_a_c_t_e_r is one of the following characters:

          _;;;;   _&&&&   _((((   _))))   _||||   _<<<<   _>>>>   newline   space   tab

     A _b_l_a_n_k is a tab or a space.  An _i_d_e_n_t_i_f_i_e_r is a sequence of letters,
     digits, or underscores starting with a letter or underscore.  Identifiers
     are used as names for _f_u_n_c_t_i_o_n_s and _v_a_r_i_a_b_l_e_s.  A _w_o_r_d is a sequence of
     _c_h_a_r_a_c_t_e_r_s separated by one or more non-quoted _m_e_t_a_c_h_a_r_a_c_t_e_r_s.

     A _c_o_m_m_a_n_d is a sequence of characters in the syntax of the shell
     language.  The shell reads each command and carries out the desired
     action either directly or by invoking separate utilities.  A special
     command is a command that is carried out by the shell without creating a
     separate process.  Except for documented side effects, most special
     commands can be implemented as separate utilities.

   CCCCoooommmmmmmmaaaannnnddddssss
     A _s_i_m_p_l_e-_c_o_m_m_a_n_d is a sequence of _b_l_a_n_k separated words which may be
     preceded by a variable assignment list (see EEEEnnnnvvvviiiirrrroooonnnnmmmmeeeennnntttt below).  The
     first word specifies the name of the command to be executed.  Except as
     specified below, the remaining words are passed as arguments to the
     invoked command.  The command name is passed as argument 0 [see _eeee_xxxx_eeee_cccc(2)].
     The _v_a_l_u_e of a simple-command is its exit status if it terminates
     normally, or (octal) 200+_s_t_a_t_u_s if it terminates abnormally [see
     _ssss_iiii_gggg_nnnn_aaaa_llll(2) for a list of _s_t_a_t_u_s values].




                                                                        PPPPaaaaggggeeee 1111






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     A _p_i_p_e_l_i_n_e is a sequence of one or more _c_o_m_m_a_n_d_s separated by _||||.  The
     standard output of each command but the last is connected by a _pppp_iiii_pppp_eeee(2) to
     the standard input of the next command.  Each command is run as a
     separate process; the shell waits for the last command to terminate.  The
     exit status of a pipeline is the exit status of the last command.

     A _l_i_s_t is a sequence of one or more pipelines separated by _;;;;, _&&&&, _&&&&_&&&&, or
     _||||_||||, and optionally terminated by _;;;;, _&&&&, or _||||_&&&&.  Of these five symbols, _;;;;,
     _&&&&, and _||||_&&&& have equal precedence, which is lower than that of _&&&&_&&&& and _||||_||||.
     The symbols _&&&&_&&&& and _||||_|||| also have equal precedence.  A semicolon (_;;;;) causes
     sequential execution of the preceding pipeline; an ampersand (_&&&&) causes
     asynchronous execution of the preceding pipeline (that is, the shell does
     not wait for that pipeline to finish).  The symbol _||||_&&&& causes asynchronous
     execution of the preceding command or pipeline with a two-way pipe
     established to the parent shell.  The standard input and output of the
     spawned command can be written to and read from by the parent shell using
     the _----_pppp option of the special commands _rrrr_eeee_aaaa_dddd and _pppp_rrrr_iiii_nnnn_tttt described later.
     The symbol _&&&&_&&&& (_||||_||||) causes the _l_i_s_t following it to be executed only if
     the preceding pipeline returns a zero (nonzero) value.  An arbitrary
     number of newlines may appear in a _l_i_s_t, instead of a semicolon, to
     delimit a command.

     A _c_o_m_m_a_n_d is either a simple-command or one of the following.  Unless
     otherwise stated, the value returned by a command is that of the last
     simple-command executed in the command.

     _ffff_oooo_rrrr _i_d_e_n_t_i_f_i_e_r [ _iiii_nnnn _w_o_r_d ... ] _;;;; _dddd_oooo _l_i_s_t _;;;; _dddd_oooo_nnnn_eeee
          Each time a _ffff_oooo_rrrr command is executed, _i_d_e_n_t_i_f_i_e_r is set to the next
          _w_o_r_d taken from the _iiii_nnnn _w_o_r_d list.  If _iiii_nnnn _w_o_r_d ...  is omitted, the
          _ffff_oooo_rrrr command executes the _dddd_oooo _l_i_s_t once for each positional parameter
          that is set (see PPPPaaaarrrraaaammmmeeeetttteeeerrrr SSSSuuuubbbbssssttttiiiittttuuuuttttiiiioooonnnn below).  Execution ends when
          there are no more words in the list.

     _ssss_eeee_llll_eeee_cccc_tttt _i_d_e_n_t_i_f_i_e_r [ _iiii_nnnn _w_o_r_d ... ] _;;;; _dddd_oooo _l_i_s_t _;;;; _dddd_oooo_nnnn_eeee
          A _ssss_eeee_llll_eeee_cccc_tttt command prints on standard error (file descriptor 2), the
          set of _w_o_r_ds, each preceded by a number.  If _iiii_nnnn _w_o_r_d ...  is
          omitted, the positional parameters are used instead (see PPPPaaaarrrraaaammmmeeeetttteeeerrrr
          SSSSuuuubbbbssssttttiiiittttuuuuttttiiiioooonnnn below).  The _PPPP_SSSS_3333 prompt is printed and a line is read
          from the standard input.  If this line consists of the number of one
          of the listed _w_o_r_ds, the value of the parameter _i_d_e_n_t_i_f_i_e_r is set to
          the _w_o_r_d corresponding to this number.  If this line is empty the
          selection list is printed again.  Otherwise the value of the
          parameter _i_d_e_n_t_i_f_i_e_r is set to _nnnn_uuuu_llll_llll.  The contents of the line read
          from standard input is saved in the variable _RRRR_EEEE_PPPP_LLLL_YYYY_....  The _l_i_s_t is
          executed for each selection until a _bbbb_rrrr_eeee_aaaa_kkkk or end-of-file is
          encountered.

     _cccc_aaaa_ssss_eeee _w_o_r_d _iiii_nnnn [ [_((((]_p_a_t_t_e_r_n [ | _p_a_t_t_e_r_n ] ... _)))) _l_i_s_t _;;;;_;;;; ] ... _eeee_ssss_aaaa_cccc
          A _cccc_aaaa_ssss_eeee command executes the _l_i_s_t associated with the first _p_a_t_t_e_r_n
          that matches _w_o_r_d.  The form of the patterns is the same as that
          used for file-name generation (see FFFFiiiilllleeeennnnaaaammmmeeee GGGGeeeennnneeeerrrraaaattttiiiioooonnnn below).




                                                                        PPPPaaaaggggeeee 2222






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _iiii_ffff _l_i_s_t _;;;; _tttt_hhhh_eeee_nnnn _l_i_s_t [ _eeee_llll_iiii_ffff _l_i_s_t _;;;; _tttt_hhhh_eeee_nnnn _l_i_s_t ] ... [ _;;;; _eeee_llll_ssss_eeee _l_i_s_t ] _;;;; _ffff_iiii
          The _l_i_s_t following _iiii_ffff is executed and, if it returns a zero exit
          status, the _l_i_s_t following the first _tttt_hhhh_eeee_nnnn is executed.  Otherwise,
          the _l_i_s_t following _eeee_llll_iiii_ffff is executed and, if its value is zero, the
          _l_i_s_t following the next _tttt_hhhh_eeee_nnnn is executed.  Failing that, the _eeee_llll_ssss_eeee
          _l_i_s_t is executed.  If no _eeee_llll_ssss_eeee _l_i_s_t or _tttt_hhhh_eeee_nnnn _l_i_s_t is executed, the _iiii_ffff
          command returns a zero exit status.

     _wwww_hhhh_iiii_llll_eeee _l_i_s_t _;;;; _dddd_oooo _l_i_s_t _;;;; _dddd_oooo_nnnn_eeee
     _uuuu_nnnn_tttt_iiii_llll _l_i_s_t _;;;; _dddd_oooo _l_i_s_t _;;;; _dddd_oooo_nnnn_eeee
          A _wwww_hhhh_iiii_llll_eeee command repeatedly executes the _wwww_hhhh_iiii_llll_eeee _l_i_s_t and, if the exit
          status of the last command in the list is zero, executes the _dddd_oooo
          _l_i_s_t; otherwise the loop terminates.  If no commands in the _dddd_oooo _l_i_s_t
          are executed, the _wwww_hhhh_iiii_llll_eeee command returns a zero exit status; _uuuu_nnnn_tttt_iiii_llll
          may be used in place of _wwww_hhhh_iiii_llll_eeee to negate the loop termination test.

     _((((_l_i_s_t_))))
          Execute _l_i_s_t in a separate environment.  Note, that if two adjacent
          open parentheses are needed for nesting, a space must be inserted to
          avoid arithmetic evaluation as described below.

     _{{{{ _l_i_s_t_;;;;_}}}}
          _l_i_s_t is simply executed.  The _{{{{ must be followed by a space.  Note
          that unlike the metacharacters _(((( and _)))), _{{{{ and _}}}} are _r_e_s_e_r_v_e_d _w_o_r_ds
          and must be typed at the beginning of a line or after a _;;;; in order
          to be recognized.

     _[[[[_[[[[_e_x_p_r_e_s_s_i_o_n_]]]]_]]]]
          Evaluates _e_x_p_r_e_s_s_i_o_n and returns a zero exit status when _e_x_p_r_e_s_s_i_o_n
          is true.  See CCCCoooonnnnddddiiiittttiiiioooonnnnaaaallll EEEExxxxpppprrrreeeessssssssiiiioooonnnnssss below, for a description of
          _e_x_p_r_e_s_s_i_o_n.

     _ffff_uuuu_nnnn_cccc_tttt_iiii_oooo_nnnn _i_d_e_n_t_i_f_i_e_r _{{{{ _l_i_s_t_;;;;_}}}}
     _i_d_e_n_t_i_f_i_e_r _((((_)))) _{{{{ _l_i_s_t_;;;;_}}}}
          Define a function which is referenced by _i_d_e_n_t_i_f_i_e_r.  The body of
          the function is the _l_i_s_t of commands between _{{{{ and _}}}} (see FFFFuuuunnnnccccttttiiiioooonnnnssss
          below).  The _{{{{ must be followed by a space.

     _tttt_iiii_mmmm_eeee _p_i_p_e_l_i_n_e
          The _p_i_p_e_l_i_n_e is executed and the elapsed time as well as the user
          and system time are printed on standard error.  Note that the
          reported times reflect the elapsed time for both the parent and the
          child processes in order to give a more accurate view of the total
          time the _p_i_p_e_l_i_n_e took to execute.

     The following reserved words are only recognized as the first word of a
     command and when not quoted:

          _iiii_ffff _tttt_hhhh_eeee_nnnn _eeee_llll_ssss_eeee _eeee_llll_iiii_ffff _ffff_iiii _cccc_aaaa_ssss_eeee _eeee_ssss_aaaa_cccc _ffff_oooo_rrrr _wwww_hhhh_iiii_llll_eeee _uuuu_nnnn_tttt_iiii_llll _dddd_oooo _dddd_oooo_nnnn_eeee _{{{{ _}}}}
          _ffff_uuuu_nnnn_cccc_tttt_iiii_oooo_nnnn _ssss_eeee_llll_eeee_cccc_tttt _tttt_iiii_mmmm_eeee _[[[[_[[[[ _]]]]_]]]]





                                                                        PPPPaaaaggggeeee 3333






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



   CCCCoooommmmmmmmeeeennnnttttssss
     A word beginning with _#### causes that word and all the following characters
     up to a newline to be ignored.

   AAAAlllliiiiaaaassssiiiinnnngggg
     The first word of each command is replaced by the text of an _aaaa_llll_iiii_aaaa_ssss if an
     _aaaa_llll_iiii_aaaa_ssss for this word has been defined.  An alias name consists of any
     number of characters excluding meta-characters, quoting characters, file
     expansion characters, parameter and command substitution characters and
     _====.  The replacement string can contain any valid shell script including
     the metacharacters listed above.  The first word of each command in the
     replaced text, other than any that are in the process of being replaced,
     is tested for aliases.  If the last character of the alias value is a
     _b_l_a_n_k the word following the alias is also checked for alias
     substitution.  Aliases can be used to redefine special builtin commands
     but cannot be used to redefine the reserved words listed above.  Aliases
     can be created, listed, and exported with the _aaaa_llll_iiii_aaaa_ssss command and can be
     removed with the _uuuu_nnnn_aaaa_llll_iiii_aaaa_ssss command.  Exported aliases remain in effect for
     scripts invoked by name, but must be reinitialized for separate
     invocations of the shell (see IIIInnnnvvvvooooccccaaaattttiiiioooonnnn below).

     _A_l_i_a_s_i_n_g is performed when scripts are read, not while they are executed.
     Therefore, for an alias to take effect the _aaaa_llll_iiii_aaaa_ssss definition command has
     to be executed before the command which references the alias is read.

     Aliases are frequently used as a short hand for full pathnames.  An
     option to the aliasing facility allows the value of the alias to be
     automatically set to the full pathname of the corresponding command.
     These aliases are called tracked aliases.  The value of a tracked alias
     is defined the first time the corresponding command is looked up and
     becomes undefined each time the _PPPP_AAAA_TTTT_HHHH variable is reset.  These aliases
     remain tracked so that the next subsequent reference redefines the value.
     Several tracked aliases are compiled into the shell.  The _----_hhhh option of
     the _ssss_eeee_tttt command makes each referenced command name into a tracked alias.

     The following _e_x_p_o_r_t_e_d _a_l_i_a_s_e_s are compiled into the shell but can be
     unset or redefined:

          _aaaa_uuuu_tttt_oooo_llll_oooo_aaaa_dddd_====_''''_tttt_yyyy_pppp_eeee_ssss_eeee_tttt _----_ffff_uuuu_''''
          _ffff_aaaa_llll_ssss_eeee_====_''''_llll_eeee_tttt _0000_''''
          _ffff_uuuu_nnnn_cccc_tttt_iiii_oooo_nnnn_ssss_====_''''_tttt_yyyy_pppp_eeee_ssss_eeee_tttt _----_ffff_''''
          _hhhh_aaaa_ssss_hhhh_====_''''_aaaa_llll_iiii_aaaa_ssss _----_tttt_''''
          _hhhh_iiii_ssss_tttt_oooo_rrrr_yyyy_====_''''_ffff_cccc _----_llll_''''
          _iiii_nnnn_tttt_eeee_gggg_eeee_rrrr_====_''''_tttt_yyyy_pppp_eeee_ssss_eeee_tttt _----_iiii_''''
          _nnnn_oooo_hhhh_uuuu_pppp_====_''''_nnnn_oooo_hhhh_uuuu_pppp _''''
          _rrrr_====_''''_ffff_cccc _----_eeee _----_''''
          _tttt_rrrr_uuuu_eeee_====_''''_::::_''''
          _tttt_yyyy_pppp_eeee_====_''''_wwww_hhhh_eeee_nnnn_cccc_eeee _----_vvvv_''''







                                                                        PPPPaaaaggggeeee 4444






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



   TTTTiiiillllddddeeee SSSSuuuubbbbssssttttiiiittttuuuuttttiiiioooonnnn
     After alias substitution is performed, each word is checked to see if it
     begins with an unquoted _~~~~.  If it does, the word up to a _//// is checked to
     see if it matches a user name in the _////_eeee_tttt_cccc_////_pppp_aaaa_ssss_ssss_wwww_dddd file.  If a match is
     found, the _~~~~ and the matched login name is replaced by the login
     directory of the matched user.  This is called a _t_i_l_d_e substitution.  If
     no match is found, the original text is left unchanged.  A _~~~~ by itself,
     or in front of a _////, is replaced by _$$$$_HHHH_OOOO_MMMM_EEEE.  A _~~~~ followed by a _++++ or _---- is
     replaced by _$$$$_PPPP_WWWW_DDDD and _$$$$_OOOO_LLLL_DDDD_PPPP_WWWW_DDDD respectively.

     In addition, _t_i_l_d_e substitution is attempted when the value of a _v_a_r_i_a_b_l_e
     _a_s_s_i_g_n_m_e_n_t begins with a _~~~~.

     Tilde substitution is not supported in all shell invocations.  (See the
     _CCCC_OOOO_MMMM_PPPP_AAAA_TTTT_IIII_BBBB_IIII_LLLL_IIII_TTTT_YYYY _IIII_SSSS_SSSS_UUUU_EEEE_SSSS section at the end of this document.)

   CCCCoooommmmmmmmaaaannnndddd SSSSuuuubbbbssssttttiiiittttuuuuttttiiiioooonnnn
     The standard output from a command enclosed in parentheses preceded by a
     dollar sign ( _$$$$_((((_)))) ) or a pair of grave accents (_````_````) may be used as part
     or all of a word; trailing newlines are removed.  In the second (archaic)
     form, the string between the quotes is processed for special quoting
     characters before the command is executed (see QQQQuuuuoooottttiiiinnnngggg below).  Not all
     forms of command substitution are supported in all shell invocations.
     (See the _CCCC_OOOO_MMMM_PPPP_AAAA_TTTT_IIII_BBBB_IIII_LLLL_IIII_TTTT_YYYY _IIII_SSSS_SSSS_UUUU_EEEE_SSSS section at the end of this document.) The
     command substitution _$$$$_((((_cccc_aaaa_tttt _ffff_iiii_llll_eeee_)))) can be replaced by the equivalent but
     faster _$$$$_((((_<<<<_ffff_iiii_llll_eeee_)))).  Command substitution of most special commands that do
     not perform input/output redirection are carried out without creating a
     separate process.

     In some shell invocations, an arithmetic expression enclosed in double
     parentheses and preceded by a dollar sign [_$$$$_((((_((((_))))_))))] is replaced by the
     value of the arithmetic expression within the double parentheses.  (See
     the _CCCC_OOOO_MMMM_PPPP_AAAA_TTTT_IIII_BBBB_IIII_LLLL_IIII_TTTT_YYYY _IIII_SSSS_SSSS_UUUU_EEEE_SSSS section at the end of this document for more
     detail.)

   PPPPaaaarrrraaaammmmeeeetttteeeerrrr SSSSuuuubbbbssssttttiiiittttuuuuttttiiiioooonnnn
     A _p_a_r_a_m_e_t_e_r is an _i_d_e_n_t_i_f_i_e_r, one or more digits, or any of the
     characters _****, _@@@@, _####, _????, _----, _$$$$, and _!!!!.  A _v_a_r_i_a_b_l_e (a parameter denoted by
     an identifier) has a _v_a_l_u_e and zero or more _a_t_t_r_i_b_u_t_e_s.  _V_a_r_i_a_b_l_e_s can be
     assigned _vvvv_aaaa_llll_uuuu_eeee_ssss and _a_t_t_r_i_b_u_t_e_s by using the _tttt_yyyy_pppp_eeee_ssss_eeee_tttt special command.  The
     attributes supported by the shell are described later with the _tttt_yyyy_pppp_eeee_ssss_eeee_tttt
     special command.  Exported parameters pass values and attributes to the
     environment.

     The shell supports a one-dimensional array facility.  An element of an
     array variable is referenced by a _s_u_b_s_c_r_i_p_t.  A _s_u_b_s_c_r_i_p_t is denoted by a
     _[[[[, followed by an _a_r_i_t_h_m_e_t_i_c _e_x_p_r_e_s_s_i_o_n (see AAAArrrriiiitttthhhhmmmmeeeettttiiiicccc EEEEvvvvaaaalllluuuuaaaattttiiiioooonnnn below)
     followed by a _]]]].  To assign values to an array, use

          _ssss_eeee_tttt _----_AAAA _n_a_m_e _v_a_l_u_e _...._...._....

     The value of all subscripts must be in the range of 0 through 1023.



                                                                        PPPPaaaaggggeeee 5555






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     Arrays need not be declared.  Any reference to a variable with a valid
     subscript is legal and an array is created if necessary.  Referencing an
     array without a subscript is equivalent to referencing the element zero.

     The _v_a_l_u_e of a _v_a_r_i_a_b_l_e may also be assigned by writing:

          _n_a_m_e_====_v_a_l_u_e [ _n_a_m_e_====_v_a_l_u_e ] ...

     If the integer attribute, _----_iiii, is set for _n_a_m_e the _v_a_l_u_e is subject to
     arithmetic evaluation as described below.

     Positional parameters, parameters denoted by a number, may be assigned
     values with the _ssss_eeee_tttt special command.  Parameter _$$$$_0000 is set from argument
     zero when the shell is invoked.

     The character _$$$$ is used to introduce substitutable _p_a_r_a_m_e_t_e_r_s.

     _$$$$_{{{{_p_a_r_a_m_e_t_e_r_}}}}
          The shell reads all the characters from _$$$$_{{{{ to the matching _}}}} as part
          of the same word even if it contains braces or metacharacters.  The
          value, if any, of the parameter is substituted.  The braces are
          required when _p_a_r_a_m_e_t_e_r is followed by a letter, digit, or
          underscore that is not to be interpreted as part of its name or when
          a variable is subscripted.  If _p_a_r_a_m_e_t_e_r is one or more digits it is
          a positional parameter.  A positional parameter of more than one
          digit must be enclosed in braces.  If _p_a_r_a_m_e_t_e_r is _**** or _@@@@, all the
          positional parameters, starting with _$$$$_1111, are substituted (separated
          by a field separator character).  If an array _i_d_e_n_t_i_f_i_e_r with
          subscript _**** or _@@@@ is used, the value for each of the elements is
          substituted (separated by a field separator character).

     _$$$$_{{{{_####_p_a_r_a_m_e_t_e_r_}}}}
          If _p_a_r_a_m_e_t_e_r is _**** or _@@@@, the number of positional parameters is
          substituted.  Otherwise, the length of the value of the _p_a_r_a_m_e_t_e_r is
          substituted.

     _$$$$_{{{{_####_i_d_e_n_t_i_f_i_e_r_[[[[_****_]]]]_}}}}
          The number of elements in the array _i_d_e_n_t_i_f_i_e_r is substituted.

     _$$$$_{{{{_p_a_r_a_m_e_t_e_r_::::_----_w_o_r_d_}}}}
          If _p_a_r_a_m_e_t_e_r is set and is non-null, substitute its value; otherwise
          substitute _w_o_r_d.

     _$$$$_{{{{_p_a_r_a_m_e_t_e_r_::::_====_w_o_r_d_}}}}
          If _p_a_r_a_m_e_t_e_r is not set or is null, set it to _w_o_r_d; the value of the
          parameter is substituted.  Positional parameters may not be assigned
          to in this way.

     _$$$$_{{{{_p_a_r_a_m_e_t_e_r_::::_????_w_o_r_d_}}}}
          If _p_a_r_a_m_e_t_e_r is set and is non-null, substitute its value;
          otherwise, print _w_o_r_d and exit from the shell.  If _w_o_r_d is omitted,
          a standard message is printed.



                                                                        PPPPaaaaggggeeee 6666






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _$$$$_{{{{_p_a_r_a_m_e_t_e_r_::::_++++_w_o_r_d_}}}}
          If _p_a_r_a_m_e_t_e_r is set and is non-null, substitute _w_o_r_d; otherwise
          substitute nothing.

     _$$$$_{{{{_p_a_r_a_m_e_t_e_r_####_p_a_t_t_e_r_n_}}}}
     _$$$$_{{{{_p_a_r_a_m_e_t_e_r_####_####_p_a_t_t_e_r_n_}}}}
          If the shell _p_a_t_t_e_r_n matches the beginning of the value of
          _p_a_r_a_m_e_t_e_r, the value of this substitution is the value of the
          _p_a_r_a_m_e_t_e_r with the matched portion deleted; otherwise the value of
          this _p_a_r_a_m_e_t_e_r is substituted.  In the first form the smallest
          matching pattern is deleted and in the second form the largest
          matching pattern is deleted.

     _$$$$_{{{{_p_a_r_a_m_e_t_e_r_%%%%_p_a_t_t_e_r_n_}}}}
     _$$$$_{{{{_p_a_r_a_m_e_t_e_r_%%%%_%%%%_p_a_t_t_e_r_n_}}}}
          If the shell _p_a_t_t_e_r_n matches the end of the value of _p_a_r_a_m_e_t_e_r, the
          value of this substitution is the value of the _p_a_r_a_m_e_t_e_r with the
          matched part deleted; otherwise substitute the value of _p_a_r_a_m_e_t_e_r.
          In the first form the smallest matching pattern is deleted and in
          the second form the largest matching pattern is deleted.

     In the above, _w_o_r_d is not evaluated unless it is to be used as the
     substituted string, so that, in the following example, _pppp_wwww_dddd is executed
     only if _dddd is not set or is null:

          _eeee_cccc_hhhh_oooo _$$$$_{{{{_dddd_::::_----_$$$$_((((_pppp_wwww_dddd_))))_}}}}

     If the colon (_::::) is omitted from the above expressions, the shell only
     checks whether _p_a_r_a_m_e_t_e_r is set or not.

     The following parameters are automatically set by the shell:

     _####        The number of positional parameters in decimal.

     _----        Flags supplied to the shell on invocation or by the _ssss_eeee_tttt command.

     _????        The decimal value returned by the last executed command.

     _$$$$        The process number of this shell.

     _____        Initially, the value _____ is an absolute pathname of the shell or
              script being executed as passed in the _e_n_v_i_r_o_n_m_e_n_t.
              Subsequently it is assigned the last argument of the previous
              command.  This parameter is not set for commands which are
              asynchronous.  This parameter is also used to hold the name of
              the matching _MMMM_AAAA_IIII_LLLL file when checking for mail.

     _!!!!        The process number of the last background command invoked.

     _EEEE_RRRR_RRRR_NNNN_OOOO    The value of _e_r_r_n_o as set by the most recently failed system
              call.  This value is system dependent and is intended for
              debugging purposes.



                                                                        PPPPaaaaggggeeee 7777






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _LLLL_IIII_NNNN_EEEE_NNNN_OOOO   The line number of the current line within the script or
              function being executed.

     _OOOO_LLLL_DDDD_PPPP_WWWW_DDDD   The previous working directory set by the _cccc_dddd command.

     _OOOO_PPPP_TTTT_AAAA_RRRR_GGGG   The value of the last option argument processed by the _gggg_eeee_tttt_oooo_pppp_tttt_ssss
              special command.

     _OOOO_PPPP_TTTT_IIII_NNNN_DDDD   The index of the last option argument processed by the _gggg_eeee_tttt_oooo_pppp_tttt_ssss
              special command.

     _PPPP_PPPP_IIII_DDDD     The process number of the parent of the shell.

     _PPPP_WWWW_DDDD      The present working directory set by the _cccc_dddd command.

     _RRRR_AAAA_NNNN_DDDD_OOOO_MMMM   Each time this variable is referenced, a random integer,
              uniformly distributed between 0 and 32767, is generated.  The
              sequence of random numbers can be initialized by assigning a
              numeric value to _RRRR_AAAA_NNNN_DDDD_OOOO_MMMM.

     _RRRR_EEEE_PPPP_LLLL_YYYY    This variable is set by the _ssss_eeee_llll_eeee_cccc_tttt statement and by the _rrrr_eeee_aaaa_dddd
              special command when no arguments are supplied.

     _SSSS_EEEE_CCCC_OOOO_NNNN_DDDD_SSSS  Each time this variable is referenced, the number of seconds
              since shell invocation is returned.  If this variable is
              assigned a value, the value returned upon reference is the value
              that was assigned plus the number of seconds since the
              assignment.

     The following variables are used by the shell:

     _CCCC_DDDD_PPPP_AAAA_TTTT_HHHH      The search path for the _cccc_dddd command.

     _CCCC_OOOO_LLLL_UUUU_MMMM_NNNN_SSSS     If this variable is set, the value is used to define the
                 width of the edit window for the shell edit modes and for
                 printing _ssss_eeee_llll_eeee_cccc_tttt lists.

     _EEEE_DDDD_IIII_TTTT_OOOO_RRRR      If the value of this variable ends in _e_m_a_c_s, or _vvvv_iiii and the
                 _VVVV_IIII_SSSS_UUUU_AAAA_LLLL variable is not set, the corresponding option (see
                 special command _ssss_eeee_tttt below) is turned on.

     _EEEE_NNNN_VVVV         If this variable is set, parameter substitution is performed
                 on the value to generate the pathname of the script that will
                 be executed when the _s_h_e_l_l is invoked (see Invocation below).
                 This file is typically used for _a_l_i_a_s and _f_u_n_c_t_i_o_n
                 definitions.

     _FFFF_CCCC_EEEE_DDDD_IIII_TTTT      The default editor name for the _ffff_cccc command.

     _FFFF_PPPP_AAAA_TTTT_HHHH       The search path for function definitions.  This path is
                 searched when a function with the _----_uuuu attribute is referenced
                 and when a command is not found.  If an executable file is



                                                                        PPPPaaaaggggeeee 8888






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



                 found, it is read and executed in the current environment.

     _IIII_FFFF_SSSS         Internal field separators (normally space, tab, and newline)
                 used to separate command words that result from command or
                 parameter substitution and for separating words with the
                 special command _rrrr_eeee_aaaa_dddd.  The first character of the _IIII_FFFF_SSSS
                 variable is used to separate arguments for the _""""_$$$$_****_""""
                 substitution (see Quoting below).

     _HHHH_IIII_SSSS_TTTT_FFFF_IIII_LLLL_EEEE    If this variable is set when the shell is invoked, the value
                 is the pathname of the file that is used to store the command
                 history (see Command re-entry below).

     _HHHH_IIII_SSSS_TTTT_SSSS_IIII_ZZZZ_EEEE    If this variable is set when the shell is invoked, the number
                 of previously entered commands that are accessible by this
                 shell is greater than or equal to this number.  The default
                 is 128.

     _HHHH_OOOO_MMMM_EEEE        The default argument (home directory) for the _cccc_dddd command.

     _LLLL_IIII_NNNN_EEEE_SSSS       If this variable is set, the value is used to determine the
                 column length for printing _ssss_eeee_llll_eeee_cccc_tttt lists.  Select lists print
                 vertically until about two-thirds of _LLLL_IIII_NNNN_EEEE_SSSS lines are filled.

     _MMMM_AAAA_IIII_LLLL        If this variable is set to the name of a mail file _a_n_d the
                 _MMMM_AAAA_IIII_LLLL_PPPP_AAAA_TTTT_HHHH variable is not set, the shell informs the user of
                 arrival of mail in the specified file.

     _MMMM_AAAA_IIII_LLLL_CCCC_HHHH_EEEE_CCCC_KKKK   This variable specifies how often (in seconds) the shell
                 checks for changes in the modification time of any of the
                 files specified by the _MMMM_AAAA_IIII_LLLL_PPPP_AAAA_TTTT_HHHH or _MMMM_AAAA_IIII_LLLL variables.  The
                 default value is 600 seconds.  When the time has elapsed, the
                 shell checks before issuing the next prompt.

     _MMMM_AAAA_IIII_LLLL_PPPP_AAAA_TTTT_HHHH    A colon ( _:::: ) separated list of filenames.  If this variable
                 is set the shell informs the user of any modifications to the
                 specified files that have occurred within the last _MMMM_AAAA_IIII_LLLL_CCCC_HHHH_EEEE_CCCC_KKKK
                 seconds.  Each filename can be followed by a _????  and a message
                 that is printed.  The message undergoes parameter
                 substitution with the variable, _$$$$_____ defined as the name of the
                 file that has changed.  The default message is _yyyy_oooo_uuuu _hhhh_aaaa_vvvv_eeee _mmmm_aaaa_iiii_llll
                 _iiii_nnnn _$$$$_____.

     _PPPP_AAAA_TTTT_HHHH        The search path for commands (see Execution below).  The user
                 may not change _PPPP_AAAA_TTTT_HHHH if executing under _rrrr_ssss_hhhh (except in
                 _...._pppp_rrrr_oooo_ffff_iiii_llll_eeee).

     _PPPP_SSSS_1111         The value of this variable is expanded for parameter
                 substitution to define the primary prompt string which by
                 default is ``_$$$$ ''.  The character _!!!!  in the primary prompt
                 string is replaced by the _c_o_m_m_a_n_d number (see Command Re-
                 entry below).



                                                                        PPPPaaaaggggeeee 9999






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _PPPP_SSSS_2222         Secondary prompt string, by default ``_>>>> ''.

     _PPPP_SSSS_3333         Selection prompt string used within a _ssss_eeee_llll_eeee_cccc_tttt loop, by default
                 ``_####_???? ''.

     _PPPP_SSSS_4444         The value of this variable is expanded for parameter
                 substitution and precedes each line of an execution trace.
                 If omitted, the execution trace prompt is ``_++++ ''.

     _SSSS_HHHH_EEEE_LLLL_LLLL       The pathname of the _s_h_e_l_l is kept in the environment.  At
                 invocation, if the basename of this variable matches the
                 pattern _****_rrrr_****_ssss_hhhh, the shell becomes restricted.

     _TTTT_MMMM_OOOO_UUUU_TTTT       If set to a value greater than zero, the shell terminates if
                 a command is not entered within the prescribed number of
                 seconds after issuing the _PPPP_SSSS_1111 prompt.  (Note that the shell
                 can be compiled with a maximum bound for this value which
                 cannot be exceeded.)

     _VVVV_IIII_SSSS_UUUU_AAAA_LLLL      If the value of this variable ends in _e_m_a_c_s, or _vvvv_iiii the
                 corresponding option (see special command _ssss_eeee_tttt below) is
                 turned on.

     ______XXXX_PPPP_GGGG        The value of this variable controls certain features of the
                 shell. The default value is 0 (zero).  (See the _CCCC_OOOO_MMMM_PPPP_AAAA_TTTT_IIII_BBBB_IIII_LLLL_IIII_TTTT_YYYY
                 _IIII_SSSS_SSSS_UUUU_EEEE_SSSS section at the end of this document.)

     The shell gives default values to _PPPP_AAAA_TTTT_HHHH, _PPPP_SSSS_1111, _PPPP_SSSS_2222, _MMMM_AAAA_IIII_LLLL_CCCC_HHHH_EEEE_CCCC_KKKK, ______XXXX_PPPP_GGGG, _TTTT_MMMM_OOOO_UUUU_TTTT
     and _IIII_FFFF_SSSS.  _HHHH_OOOO_MMMM_EEEE, _MMMM_AAAA_IIII_LLLL and _SSSS_HHHH_EEEE_LLLL_LLLL are set by _llll_oooo_gggg_iiii_nnnn(1).

   BBBBllllaaaannnnkkkk IIIInnnntttteeeerrrrpppprrrreeeettttaaaattttiiiioooonnnn
     After parameter and command substitution, the results of substitutions
     are scanned for the field separator characters ( those found in _IIII_FFFF_SSSS ) and
     split into distinct arguments where such characters are found.  Explicit
     null arguments (_""""_"""" or _''''_'''') are retained.  Implicit null arguments (those
     resulting from _p_a_r_a_m_e_t_e_r_s that have no values) are removed.

   FFFFiiiilllleeeennnnaaaammmmeeee GGGGeeeennnneeeerrrraaaattttiiiioooonnnn
     Following substitution, each command _w_o_r_d is scanned for the characters
     _****, _????, and _[[[[ unless the _----_ffff option has been _ssss_eeee_tttt.  If one of these
     characters appears, the word is regarded as a _p_a_t_t_e_r_n.  The word is
     replaced with lexicographically sorted filenames that match the pattern.
     If no filename is found that matches the pattern, the word is left
     unchanged.  When a _p_a_t_t_e_r_n is used for filename generation, the character
     _....  at the start of a filename or immediately following a _////, as well as
     the character _//// itself, must be matched explicitly.  In other instances
     of pattern matching the _//// and _....  are not treated specially.

     _****       Matches any string, including the null string.






                                                                       PPPPaaaaggggeeee 11110000






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _????       Matches any single character.

     _[[[[..._]]]]   Matches any one of the enclosed characters.  A pair of characters
             separated by _---- matches any character lexically between the pair,
             inclusive.  If the first character following the opening "[ " is
             a "!" any character not enclosed is matched.  A _---- can be included
             in the character set by putting it as the first or last
             character.

     A _p_a_t_t_e_r_n-_l_i_s_t is a list of one or more patterns separated from each
     other with a _||||.  Composite patterns can be formed with one or more of the
     following:

     _????_((((_p_a_t_t_e_r_n-_l_i_s_t_))))   Optionally matches any one of the given patterns.

     _****_((((_p_a_t_t_e_r_n-_l_i_s_t_))))   Matches zero or more occurrences of the given patterns.

     _++++_((((_p_a_t_t_e_r_n-_l_i_s_t_))))   Matches one or more occurrences of the given patterns.

     _@@@@_((((_p_a_t_t_e_r_n-_l_i_s_t_))))   Matches exactly one of the given patterns.

     _!!!!_((((_p_a_t_t_e_r_n-_l_i_s_t_))))   Matches anything, except one of the given patterns.

   QQQQuuuuoooottttiiiinnnngggg
     Each of the _m_e_t_a_c_h_a_r_a_c_t_e_r_s listed above (see Definitions above) has a
     special meaning to the shell and causes termination of a word unless
     quoted.  A character may be _q_u_o_t_e_d (that is, made to stand for itself) by
     preceding it with a _\\\\.  The pair _\\\\_nnnn_eeee_wwww_llll_iiii_nnnn_eeee is removed.  All characters
     enclosed between a pair of single quote marks (_''''_''''), are quoted.  A single
     quote cannot appear within single quotes.  Inside double quote marks
     (_""""_""""), parameter and command substitution occurs and _\\\\ quotes the
     characters _\\\\, _````, _"""", and _$$$$.  The meaning of _$$$$_**** and _$$$$_@@@@ is identical when
     not quoted or when used as a variable assignment value or as a filename.
     However, when used as a command argument, _""""_$$$$_****_"""" is equivalent to
     _""""_$$$$_1111_d_$$$$_2222_d..._"""", where _d is the first character of the _IIII_FFFF_SSSS variable, whereas
     _""""_$$$$_@@@@_"""" is equivalent to _""""_$$$$_1111_""""_d_""""_$$$$_2222_""""_d_...._...._.... .  Inside grave quote marks (_````_````) _\\\\
     quotes the characters _\\\\, _````, and _$$$$.  If the grave quotes occur within
     double quotes, _\\\\ also quotes the character _"""".

     The special meaning of reserved words or aliases can be removed by
     quoting any character of the reserved word.  The recognition of function
     names or special command names listed below cannot be altered by quoting
     them.

   AAAArrrriiiitttthhhhmmmmeeeettttiiiicccc EEEEvvvvaaaalllluuuuaaaattttiiiioooonnnn
     An ability to perform integer arithmetic is provided with the special
     command _llll_eeee_tttt.  Evaluations are performed using _l_o_n_g arithmetic.  Constants
     are of the form [_b_a_s_e_####]_n where _b_a_s_e is a decimal number between two and
     thirty-six representing the arithmetic base and _n is a number in that
     base.  If _b_a_s_e_#### is omitted base 10 is used.





                                                                       PPPPaaaaggggeeee 11111111






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     An arithmetic expression uses the same syntax, precedence, and
     associativity of expression of the C language.  All the integral
     operators, other than _++++_++++, _----_----, _????_::::, and _,,,, are supported.  Variables can be
     referenced by name within an arithmetic expression without using the
     parameter substitution syntax.  When a variable is referenced, its value
     is evaluated as an arithmetic expression.

     An internal integer representation of a _v_a_r_i_a_b_l_e can be specified with
     the _----_iiii option of the _tttt_yyyy_pppp_eeee_ssss_eeee_tttt special command.  Arithmetic evaluation is
     performed on the value of each assignment to a variable with the _----_iiii
     attribute.  If you do not specify an arithmetic base, the first
     assignment to the variable determines the arithmetic base.  This base is
     used when parameter substitution occurs.

     Since many of the arithmetic operators require quoting, an alternative
     form of the _llll_eeee_tttt command is provided.  For any command which begins with a
     _((((_((((, all the characters until a matching _))))_)))) are treated as a quoted
     expression.  More precisely, _((((_((((..._))))_)))) is equivalent to _llll_eeee_tttt _""""..._"""".

   PPPPrrrroooommmmppppttttiiiinnnngggg
     When used interactively, the shell prompts with the parameter expanded
     value of _PPPP_SSSS_1111 before reading a command.  If at any time a newline is typed
     and further input is needed to complete a command, the secondary prompt
     (that is, the value of _PPPP_SSSS_2222) is issued.

   CCCCoooonnnnddddiiiittttiiiioooonnnnaaaallll EEEExxxxpppprrrreeeessssssssiiiioooonnnnssss
     A _c_o_n_d_i_t_i_o_n_a_l _e_x_p_r_e_s_s_i_o_n is used with the _[[[[_[[[[ compound command to test
     attributes of files and to compare strings.  Word splitting and filename
     generation are not performed on the words between _[[[[_[[[[ and _]]]]_]]]].  Each
     expression can be constructed from one or more of the following unary or
     binary expressions:

     _----_aaaa _f_i_l_e             True, if _f_i_l_e exists.
     _----_bbbb _f_i_l_e             True, if _f_i_l_e exists and is a block special file.
     _----_cccc _f_i_l_e             True, if _f_i_l_e exists and is a character special file.
     _----_dddd _f_i_l_e             True, if _f_i_l_e exists and is a directory.
     _----_eeee _f_i_l_e             Same as -a file.
     _----_ffff _f_i_l_e             True, if _f_i_l_e exists and is an ordinary file.
     _----_gggg _f_i_l_e             True, if _f_i_l_e exists and is has its setgid bit set.
     _----_kkkk _f_i_l_e             True, if _f_i_l_e exists and is has its sticky bit set.
     _----_nnnn _s_t_r_i_n_g           True, if length of _s_t_r_i_n_g is nonzero.
     _----_oooo _o_p_t_i_o_n           True, if option named _o_p_t_i_o_n is on.
     _----_pppp _f_i_l_e             True, if _f_i_l_e exists and is a fifo special file or a
                         pipe.
     _----_rrrr _f_i_l_e             True, if _f_i_l_e exists and is readable by current
                         process.
     _----_ssss _f_i_l_e             True, if _f_i_l_e exists and has size greater than zero.
     _----_tttt _f_i_l_d_e_s           True, if file descriptor number _f_i_l_d_e_s is open and
                         associated with a terminal device.
     _----_uuuu _f_i_l_e             True, if _f_i_l_e exists and is has its setuid bit set.





                                                                       PPPPaaaaggggeeee 11112222






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _----_wwww _f_i_l_e             True, if _f_i_l_e exists and is writable by current
                         process.
     _----_xxxx _f_i_l_e             True, if _f_i_l_e exists and is executable by current
                         process.  If _f_i_l_e exists and is a directory, the
                         current process has permission to search in the
                         directory.
     _----_zzzz _s_t_r_i_n_g           True, if length of _s_t_r_i_n_g is zero.
     _----_LLLL _f_i_l_e             True, if _f_i_l_e exists and is a symbolic link.
     _----_OOOO _f_i_l_e             True, if _f_i_l_e exists and is owned by the effective
                         user id of this process.
     _----_GGGG _f_i_l_e             True, if _f_i_l_e exists and its group matches the
                         effective group id of this process.
     _----_SSSS _f_i_l_e             True, if _f_i_l_e exists and is a socket.
     _f_i_l_e_1 _----_nnnn_tttt _f_i_l_e_2     True, if _f_i_l_e_1 exists and is newer than _f_i_l_e_2.
     _f_i_l_e_1 _----_oooo_tttt _f_i_l_e_2     True, if _f_i_l_e_1 exists and is older than _f_i_l_e_2.
     _f_i_l_e_1 _----_eeee_ffff _f_i_l_e_2     True, if _f_i_l_e_1 and _f_i_l_e_2 exist and refer to the same
                         file.
     _s_t_r_i_n_g _==== _p_a_t_t_e_r_n    True, if _s_t_r_i_n_g matches _p_a_t_t_e_r_n.
     _s_t_r_i_n_g _!!!!_==== _p_a_t_t_e_r_n   True, if _s_t_r_i_n_g does not match _p_a_t_t_e_r_n.
     _s_t_r_i_n_g_1 _<<<< _s_t_r_i_n_g_2   True, if _s_t_r_i_n_g_1 comes before _s_t_r_i_n_g_2 based on ASCII
                         value of their characters.
     _s_t_r_i_n_g_1 _>>>> _s_t_r_i_n_g_2   True, if _s_t_r_i_n_g_1 comes after _s_t_r_i_n_g_2 based on ASCII
                         value of their characters.
     _e_x_p_1 _----_eeee_qqqq _e_x_p_2       True, if _e_x_p_1 is equal to _e_x_p_2.
     _e_x_p_1 _----_nnnn_eeee _e_x_p_2       True, if _e_x_p_1 is not equal to _e_x_p_2.
     _e_x_p_1 _----_llll_tttt _e_x_p_2       True, if _e_x_p_1 is less than _e_x_p_2.
     _e_x_p_1 _----_gggg_tttt _e_x_p_2       True, if _e_x_p_1 is greater than _e_x_p_2.
     _e_x_p_1 _----_llll_eeee _e_x_p_2       True, if _e_x_p_1 is less than or equal to _e_x_p_2.
     _e_x_p_1 _----_gggg_eeee _e_x_p_2       True, if _e_x_p_1 is greater than or equal to _e_x_p_2.

     In each of the above expressions, if _f_i_l_e is of the form _////_dddd_eeee_vvvv_////_ffff_dddd_////_n, where
     _n is an integer, the test is applied to the open file whose descriptor
     number is _n.

     A compound expression can be constructed from these primitives by using
     any of the following, listed in decreasing order of precedence.

     _((((_e_x_p_r_e_s_s_i_o_n_))))                 True, if _e_x_p_r_e_s_s_i_o_n is true.  Used to group
                                  expressions.

     _!!!! _e_x_p_r_e_s_s_i_o_n                 True if _e_x_p_r_e_s_s_i_o_n is false.

     _e_x_p_r_e_s_s_i_o_n_1 _&&&&_&&&& _e_x_p_r_e_s_s_i_o_n_2   True, if _e_x_p_r_e_s_s_i_o_n_1 and _e_x_p_r_e_s_s_i_o_n_2 are
                                  both true.

     _e_x_p_r_e_s_s_i_o_n_1 _||||_|||| _e_x_p_r_e_s_s_i_o_n_2   True, if either _e_x_p_r_e_s_s_i_o_n_1 or _e_x_p_r_e_s_s_i_o_n_2
                                  is true.

   IIIInnnnppppuuuutttt////OOOOuuuuttttppppuuuutttt
     Before a command is executed, its input and output may be redirected
     using a special notation interpreted by the shell.  The following may
     appear anywhere in a simple-command or may precede or follow a _c_o_m_m_a_n_d



                                                                       PPPPaaaaggggeeee 11113333






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     and are not passed on to the invoked command.  Command and parameter
     substitution occurs before _w_o_r_d or _d_i_g_i_t is used except as noted below.
     Filename generation occurs only if the pattern matches a single file and
     blank interpretation is not performed.

     _<<<<_w_o_r_d       Use file _w_o_r_d as standard input (file descriptor 0).

     _>>>>_w_o_r_d       Use file _w_o_r_d as standard output (file descriptor 1).  If the
                 file does not exist it is created.  If the file exists, is a
                 regular file, and the _nnnn_oooo_cccc_llll_oooo_bbbb_bbbb_eeee_rrrr option is on, this causes an
                 error; otherwise, it is truncated to zero length.

     _>>>>_||||_w_o_r_d      Sames as _>>>>, except that it overrides the _nnnn_oooo_cccc_llll_oooo_bbbb_bbbb_eeee_rrrr option.

     _>>>>_>>>>_w_o_r_d      Use file _w_o_r_d as standard output.  If the file exists output
                 is appended to it (by first seeking to the end-of-file);
                 otherwise, the file is created.

     _<<<<_>>>>_w_o_r_d      Open file _w_o_r_d for reading and writing as standard input.

     _<<<<_<<<<[_----]_w_o_r_d   The shell input is read up to a line that is the same as
                 _w_o_r_d, or to an end-of-file.  No parameter substitution,
                 command substitution or filename generation is performed on
                 _w_o_r_d.  The resulting document, called a _h_e_r_e-_d_o_c_u_m_e_n_t,
                 becomes the standard input.  If any character of _w_o_r_d is
                 quoted, no interpretation is placed upon the characters of
                 the document; otherwise, parameter and command substitution
                 occurs, _\\\\_nnnn_eeee_wwww_llll_iiii_nnnn_eeee is ignored, and _\\\\ must be used to quote the
                 characters _\\\\, _$$$$, _````, and the first character of _w_o_r_d.  If _---- is
                 appended to _<<<<_<<<<, all leading tabs are stripped from _w_o_r_d and
                 from the document.

     _<<<<_&&&&_d_i_g_i_t     The standard input is duplicated from file descriptor _d_i_g_i_t
                 [see _dddd_uuuu_pppp(2)].  Similarly for the standard output using _>>>>_&&&&
                 _d_i_g_i_t.

     _<<<<_&&&&_----         The standard input is closed.  Similarly for the standard
                 output using _>>>>_&&&&_----.

     _<<<<_&&&&_pppp         The input from the co-process is moved to standard input.

     _>>>>_&&&&_pppp         The output to the co-process is moved to standard output.

     If one of the above is preceded by a digit, the file descriptor number
     referred to is that specified by the digit (instead of the default 0 or
     1).  For example,

          _...._...._.... _2222_>>>>_&&&&_1111

     means file descriptor 2 is to be opened for writing as a duplicate of
     file descriptor 1.




                                                                       PPPPaaaaggggeeee 11114444






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     The order in which redirections are specified is significant.  The shell
     evaluates each redirection in terms of the (_f_i_l_e _d_e_s_c_r_i_p_t_o_r, _f_i_l_e)
     association at the time of evaluation.  For example:

          _...._...._.... _1111_>>>>_f_n_a_m_e _2222_>>>>_&&&&_1111

     first associates file descriptor 1 with file _f_n_a_m_e.  It then associates
     file descriptor 2 with the file associated with file descriptor 1 (that
     is, _f_n_a_m_e).  If the order of redirections were reversed, file descriptor
     2 is associated with the terminal (assuming file descriptor 1 had been)
     and then file descriptor 1 is associated with file _f_n_a_m_e.

     If a command is followed by _&&&& and job control is not active, the default
     standard input for the command is the empty file _////_dddd_eeee_vvvv_////_nnnn_uuuu_llll_llll.  Otherwise,
     the environment for the execution of a command contains the file
     descriptors of the invoking shell as modified by input/output
     specifications.

   EEEEnnnnvvvviiiirrrroooonnnnmmmmeeeennnntttt
     The _e_n_v_i_r_o_n_m_e_n_t [see _eeee_nnnn_vvvv_iiii_rrrr_oooo_nnnn(5)] is a list of name-value pairs that is
     passed to an executed program in the same way as a normal argument list.
     The names must be _i_d_e_n_t_i_f_i_e_r_s and the values are character strings.  The
     shell interacts with the environment in several ways.  On invocation, the
     shell scans the environment and creates a variable for each name found,
     giving it the corresponding value and marking it _e_x_p_o_r_t . Executed
     commands inherit the environment.  If the user modifies the values of
     these variables or creates new ones, using the _eeee_xxxx_pppp_oooo_rrrr_tttt or _tttt_yyyy_pppp_eeee_ssss_eeee_tttt _----_xxxx
     commands they become part of the environment.  The environment seen by
     any executed command is thus composed of any name-value pairs originally
     inherited by the shell, whose values may be modified by the current
     shell, plus any additions which must be noted in _eeee_xxxx_pppp_oooo_rrrr_tttt or _tttt_yyyy_pppp_eeee_ssss_eeee_tttt _----_xxxx
     commands.

     The environment for any _s_i_m_p_l_e-_c_o_m_m_a_n_d or function may be augmented by
     prefixing it with one or more variable assignments.  A variable
     assignment argument is a word of the form _i_d_e_n_t_i_f_i_e_r=_v_a_l_u_e.  Thus, the
     commands:

          _TTTT_EEEE_RRRR_MMMM_====_4444_5555_0000 _c_m_d _a_r_g_s
          _((((_eeee_xxxx_pppp_oooo_rrrr_tttt _TTTT_EEEE_RRRR_MMMM_;;;; _TTTT_EEEE_RRRR_MMMM_====_4444_5555_0000_;;;; _c_m_d _a_r_g_s_))))

     are equivalent (as far as the above execution of _c_m_d is concerned except
     for commands listed with one or two asterisks, * or **, in the SSSSppppeeeecccciiiiaaaallll
     CCCCoooommmmmmmmaaaannnnddddssss section).

     If the _----_kkkk flag is set, _a_l_l variable assignment arguments are placed in
     the environment, even if they occur after the command name.  The
     following first prints _aaaa_====_bbbb _cccc and then _cccc_::::

          _eeee_cccc_hhhh_oooo _aaaa_====_bbbb _cccc
          _ssss_eeee_tttt _----_kkkk
          _eeee_cccc_hhhh_oooo _aaaa_====_bbbb _cccc



                                                                       PPPPaaaaggggeeee 11115555






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     This feature is intended for use with scripts written for early versions
     of the shell and its use in new scripts is strongly discouraged.  It is
     likely to disappear someday.

   FFFFuuuunnnnccccttttiiiioooonnnnssss
     The _ffff_uuuu_nnnn_cccc_tttt_iiii_oooo_nnnn reserved word, described in the Commands section above, is
     used to define shell functions.  Shell functions are read in and stored
     internally.  Alias names are resolved when the function is read.
     Functions are executed like commands with the arguments passed as
     positional parameters (see Execution below).  Within a function, the
     special positional parameter $0 may be the name of the invoking program
     or the name of the function, depending on how the shell is invoked.  (See
     the _CCCC_OOOO_MMMM_PPPP_AAAA_TTTT_IIII_BBBB_IIII_LLLL_IIII_TTTT_YYYY _IIII_SSSS_SSSS_UUUU_EEEE_SSSS section at the end of this document)

     Functions execute in the same process as the caller and share all files
     and present working directory with the caller.  Traps caught by the
     caller are reset to their default action inside the function.  A trap
     condition that is not caught or ignored by the function causes the
     function to terminate and the condition to be passed on to the caller.  A
     trap on _EEEE_XXXX_IIII_TTTT set inside a function is executed after the function
     completes in the environment of the caller.  Ordinarily, variables are
     shared between the calling program and the function.  However, the
     _tttt_yyyy_pppp_eeee_ssss_eeee_tttt special command used within a function defines local variables
     whose scope includes the current function and all functions it calls.

     The special command _rrrr_eeee_tttt_uuuu_rrrr_nnnn is used to return from function calls.  Errors
     within functions return control to the caller.

     Function identifiers can be listed with the _----_ffff or _++++_ffff option of the
     _tttt_yyyy_pppp_eeee_ssss_eeee_tttt special command.  The text of functions may also be listed with
     _----_ffff.  Function can be undefined with the _----_ffff option of the _uuuu_nnnn_ssss_eeee_tttt special
     command.

     Ordinarily, functions are unset when the shell executes a shell script.
     The _----_xxxx_ffff option of the _tttt_yyyy_pppp_eeee_ssss_eeee_tttt command allows a function to be exported to
     scripts that are executed without a separate invocation of the shell.
     Functions that need to be defined across separate invocations of the
     shell should be specified in the _EEEE_NNNN_VVVV file with the _----_xxxx_ffff option of _tttt_yyyy_pppp_eeee_ssss_eeee_tttt.

   JJJJoooobbbbssss
     If the _mmmm_oooo_nnnn_iiii_tttt_oooo_rrrr option of the _ssss_eeee_tttt command is turned on, an interactive
     shell associates a _j_o_b with each pipeline.  It keeps a table of current
     jobs, printed by the _jjjj_oooo_bbbb_ssss command, and assigns them small integer
     numbers.  The max number of jobs is defined by the systune value 'maxup'.
     This is determined at shell invocation. When a job is started
     asynchronously with _&&&&, the shell prints a line which looks like:

          [1] 1234

     indicating that the job which was started asynchronously was job number 1
     and had one (top-level) process, whose process id was 1234.




                                                                       PPPPaaaaggggeeee 11116666






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     If you are running a job and wish to do something else you may hit the
     key _^^^^_ZZZZ (CTRL-z) which sends a STOP signal to the current job.  The shell
     normally indicates that the job has been `Stopped', and prints another
     prompt.  You can manipulate the state of this job, putting it in the
     background with the _bbbb_gggg command or run some other commands and eventually
     bring the job back into the foreground with the foreground command _ffff_gggg.  A
     _^^^^_ZZZZ takes effect immediately and is like an interrupt in that pending
     output and unread input are discarded when it is typed.

     A job being run in the background stops if it tries to read from the
     terminal.  Background jobs are normally allowed to produce output, but
     this can be disabled by giving the command ``stty tostop''.  If you set
     this tty option, background jobs stop when they try to produce output
     like they do when they try to read input.

     There are several ways to refer to jobs in the shell.  A job can be
     referred to by the process id of any process of the job or by one of the
     following:

     _%%%%_n_u_m_b_e_r    The job with the given number.

     _%%%%_s_t_r_i_n_g    Any job whose command line begins with _s_t_r_i_n_g.

     _%%%%_????_s_t_r_i_n_g   Any job whose command line contains _s_t_r_i_n_g.

     _%%%%_%%%%         Current job.

     _%%%%_++++         Equivalent to _%%%%_%%%%.

     _%%%%_----         Previous job.

     This shell learns immediately whenever a process changes state.  It
     normally informs you whenever a job becomes blocked so that no further
     progress is possible, but only just before it prints a prompt.  This is
     done so that it does not otherwise disturb your work.

     When the monitor mode is on, each background job that completes triggers
     any trap set for _CCCC_HHHH_LLLL_DDDD.

     When you try to leave the shell while jobs are running or stopped, you
     are be warned that `You have stopped(running) jobs.'  You may use the
     _jjjj_oooo_bbbb_ssss command to see what they are.  If you do this or immediately try to
     exit again, the shell does not warn you a second time, and the stopped
     jobs are terminated.

   SSSSiiiiggggnnnnaaaallllssss
     When a command is run in the background (that it, when it is followed by
     _&&&&) and the job _mmmm_oooo_nnnn_iiii_tttt_oooo_rrrr option is active, the command does not receive
     INTERRUPT or QUIT signals.  When a command is run in the background (that
     it, when it is followed by _&&&&) and the job _mmmm_oooo_nnnn_iiii_tttt_oooo_rrrr option is not active,
     the command receives INTERRUPT or QUIT signals but ignores them.
     Otherwise, signals have the values inherited by the shell from its parent



                                                                       PPPPaaaaggggeeee 11117777






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     (but see also the _tttt_rrrr_aaaa_pppp command below).

   EEEExxxxeeeeccccuuuuttttiiiioooonnnn
     Each time a command is executed, the above substitutions are carried out.
     If the command name matches one of the special commands listed below, it
     is executed within the current shell process.  Next, the command name is
     checked to see if it matches one of the user defined functions.  If it
     does, the positional parameters are saved and reset to the arguments of
     the _f_u_n_c_t_i_o_n call.  When the _f_u_n_c_t_i_o_n completes or issues a _rrrr_eeee_tttt_uuuu_rrrr_nnnn, the
     positional parameter list is restored and any trap set on _EEEE_XXXX_IIII_TTTT within the
     function is executed.  The value of a _f_u_n_c_t_i_o_n is the value of the last
     command executed.  A function is also executed in the current shell
     process.  If a command name is not a _s_p_e_c_i_a_l _c_o_m_m_a_n_d or a user defined
     _f_u_n_c_t_i_o_n, a process is created and an attempt is made to execute the
     command via _eeee_xxxx_eeee_cccc(2).

     The shell variable _PPPP_AAAA_TTTT_HHHH defines the search path for the directory
     containing the command.  Alternative directory names are separated by a
     colon (_::::).  The default path is _////_uuuu_ssss_rrrr_////_bbbb_iiii_nnnn_::::  (specifying _////_uuuu_ssss_rrrr_////_bbbb_iiii_nnnn and the
     current directory in that order).  The current directory can be specified
     by two or more adjacent colons, or by a colon at the beginning or end of
     the path list.  If the command name contains a _//// the search path is not
     used.  Otherwise, each directory in the path is searched for an
     executable file.  If the file has execute permission but is not a
     directory or an _aaaa_...._oooo_uuuu_tttt file, it is assumed to be a file containing shell
     commands.  A sub-shell is spawned to read it.  All non-exported aliases,
     functions, and variables, are removed in this case.  A parenthesized
     command is executed in a sub-shell without removing non-exported
     quantities.

   CCCCoooommmmmmmmaaaannnndddd RRRReeee----eeeennnnttttrrrryyyy
     The text of the last _HHHH_IIII_SSSS_TTTT_SSSS_IIII_ZZZZ_EEEE (default 128) commands entered from a
     terminal device is saved in a _h_i_s_t_o_r_y file.  The file _$$$$_HHHH_OOOO_MMMM_EEEE_////_...._ssss_hhhh______hhhh_iiii_ssss_tttt_oooo_rrrr_yyyy
     is used if the file denoted by the _HHHH_IIII_SSSS_TTTT_FFFF_IIII_LLLL_EEEE variable is not set or is not
     writable.  A shell can access the commands of all _i_n_t_e_r_a_c_t_i_v_e shells
     which use the same named _HHHH_IIII_SSSS_TTTT_FFFF_IIII_LLLL_EEEE.  The special command _ffff_cccc is used to
     list or edit a portion of this file.  The portion of the file to be
     edited or listed can be selected by number or by giving the first
     character or characters of the command.  A single command or range of
     commands can be specified.  If you do not specify an editor program as an
     argument to _ffff_cccc the value of the variable _FFFF_CCCC_EEEE_DDDD_IIII_TTTT is used.  If _FFFF_CCCC_EEEE_DDDD_IIII_TTTT is
     not defined _////_uuuu_ssss_rrrr_////_bbbb_iiii_nnnn_////_eeee_dddd is used.  The edited command(s) is printed and
     re-executed upon leaving the editor.  The editor name _---- is used to skip
     the editing phase and to re-execute the command.  In this case a
     substitution variable of the form _o_l_d_====_n_e_w can be used to modify the
     command before execution.  For example, if _rrrr is aliased to _''''_ffff_cccc _----_eeee _----_'''',
     typing `_rrrr _bbbb_aaaa_dddd_====_gggg_oooo_oooo_dddd _cccc' re-executes the most recent command that starts
     with the letter _cccc, replacing the first occurrence of the string _bbbb_aaaa_dddd with
     the string _gggg_oooo_oooo_dddd.






                                                                       PPPPaaaaggggeeee 11118888






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



   IIIInnnnlllliiiinnnneeee EEEEddddiiiittttiiiinnnngggg OOOOppppttttiiiioooonnnn
     Normally, each command line entered from a terminal device is simply
     typed followed by a newline (`RETURN' or `LINE FEED').  If either the
     _eeee_mmmm_aaaa_cccc_ssss, or _vvvv_iiii option is active, the user can edit the command line.  To be
     in either of these edit modes _ssss_eeee_tttt the corresponding option.  An editing
     option is automatically selected each time the _VVVV_IIII_SSSS_UUUU_AAAA_LLLL or _EEEE_DDDD_IIII_TTTT_OOOO_RRRR variable
     is assigned a value ending in either of these option names.

     The editing features require that the user's terminal accept `RETURN' as
     carriage return without line feed and that a space (` ') must overwrite
     the current character on the screen.

     The editing modes implement a concept where the user is looking through a
     window at the current line.  The window width is the value of _CCCC_OOOO_LLLL_UUUU_MMMM_NNNN_SSSS if
     it is defined, otherwise 80.  If the line is longer than the window width
     minus two, a mark is displayed at the end of the window to notify the
     user.  As the cursor moves and reaches the window boundaries, the window
     is centered about the cursor.  The mark is a _>>>> (<_,,,, _****) if the line extends
     on the right (left, both) side(s) of the window.

     The search commands in each edit mode provide access to the history file.
     Only strings are matched, not patterns, although a leading _^^^^ in the
     string restricts the match to begin at the first character in the line.

   EEEEmmmmaaaaccccssss EEEEddddiiiittttiiiinnnngggg MMMMooooddddeeee
     This mode is entered by enabling either the _e_m_a_c_s or _g_m_a_c_s option.  The
     only difference between these two modes is the way they handle _^^^^_TTTT.  To
     edit, the user moves the cursor to the point needing correction and then
     inserts or deletes characters or words as needed.  All the editing
     commands are control characters or escape sequences.  The notation for
     control characters is caret ( _^^^^ ) followed by the character.  For
     example, _^^^^_FFFF is the notation for CTRL-_ffff.  This is entered by depressing
     `f' while holding down the `CTRL' (control) key.  (The notation _^^^^_????
     indicates the DEL (delete) key.)

     The notation for escape sequences is _MMMM_---- followed by a character.  For
     example, _MMMM_----_ffff (pronounced Meta f) is entered by depressing ESC (ascii
     _\\\\_0000_3333_3333) followed by `f'.  (_MMMM_----_FFFF would be the notation for ESC followed by
     `SHIFT' (capital) `F'.)

     All edit commands operate from any place on the line (not just at the
     beginning).  Neither the "RETURN" nor the "LINE FEED" key is entered
     after edit commands except when noted.

     _^^^^_FFFF        Move cursor forward (right) one character.
     _MMMM_----_ffff       Move cursor forward one word.  (The emacs editor's idea of a
               word is a string of characters consisting of only letters,
               digits and underscores.)
     _^^^^_BBBB        Move cursor backward (left) one character.
     _MMMM_----_bbbb       Move cursor backward one word.





                                                                       PPPPaaaaggggeeee 11119999






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _^^^^_AAAA        Move cursor to start of line.
     _^^^^_EEEE        Move cursor to end of line.
     _^^^^_]]]]_c_h_a_r    Move cursor forward to character _c_h_a_r on current line.
     _MMMM_----_^^^^_]]]]_c_h_a_r  Move cursor back to character _c_h_a_r on current line.
     _^^^^_XXXX_^^^^_XXXX      Interchange the cursor and mark.
     _e_r_a_s_e     (User defined erase character as defined by the _ssss_tttt_tttt_yyyy(1)
               command, usually _^^^^_HHHH or _####.)  Delete previous character.
     _^^^^_DDDD        Delete current character.
     _MMMM_----_dddd       Delete current word.
     _MMMM_----_^^^^_HHHH      (Meta-backspace) Delete previous word.
     _MMMM_----_hhhh       Delete previous word.
     _MMMM_----_^^^^_????      (Meta-DEL) Delete previous word (if your interrupt character is
               _^^^^_????  (DEL, the default) then this command will not work).
     _^^^^_TTTT        Transpose current character with next character in _e_m_a_c_s mode.
               Transpose two previous characters in _g_m_a_c_s mode.
     _^^^^_CCCC        Capitalize current character.
     _MMMM_----_cccc       Capitalize current word.
     _MMMM_----_llll       Change the current word to lower case.
     _^^^^_KKKK        Delete from the cursor to the end of the line.  If preceded by
               a numerical parameter whose value is less than the current
               cursor position, then delete from given position up to the
               cursor.  If preceded by a numerical parameter whose value is
               greater than the current cursor position, then delete from
               cursor up to given cursor position.
     _^^^^_WWWW        Kill from the cursor to the mark.
     _MMMM_----_pppp       Push the region from the cursor to the mark on the stack.
     _kkkk_iiii_llll_llll      (User defined kill character as defined by the stty command,
               usually _^^^^_GGGG or _@@@@.)  Kill the entire current line.  If two _kkkk_iiii_llll_llll
               characters are entered in succession, all kill characters from
               then on cause a line feed (useful when using paper terminals).
     _^^^^_YYYY        Restore last item removed from line. (Yank item back to the
               line.)
     _^^^^_LLLL        Line feed and print current line.
     _^^^^_@@@@        (Null character) Set mark.
     _MMMM_----_ssss_pppp_aaaa_cccc_eeee   (Meta space) Set mark.
     _^^^^_JJJJ        (New line) Execute the current line.
     _^^^^_MMMM        (Return) Execute the current line.
     _e_o_f       End-of-file character, normally _^^^^_DDDD, is processed as an End-of-
               file only if the current line is null.
     _^^^^_PPPP        Fetch previous command.  Each time _^^^^_PPPP is entered the previous
               command back in time is accessed.  Moves back one line when not
               on the first line of a multi-line command.
     _MMMM_----_<<<<       Fetch the least recent (oldest) history line.
     _MMMM_----_>>>>       Fetch the most recent (youngest) history line.
     _^^^^_NNNN        Fetch next command line.  Each time _^^^^_NNNN is entered the next
               command line forward in time is accessed.
     _^^^^_RRRR_s_t_r_i_n_g  Reverse search history for a previous command line containing
               _s_t_r_i_n_g.  If a parameter of zero is given, the search is
               forward.  _S_t_r_i_n_g is terminated by a "RETURN" or "NEW LINE".  If
               string is preceded by a _^^^^, the matched line must begin with
               _s_t_r_i_n_g.  If _s_t_r_i_n_g is omitted, then the next command line
               containing the most recent _s_t_r_i_n_g is accessed.  In this case a



                                                                       PPPPaaaaggggeeee 22220000






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



               parameter of zero reverses the direction of the search.
     _^^^^_OOOO        Operate - Execute the current line and fetch the next line
               relative to current line from the history file.
     _MMMM_----_d_i_g_i_t_s  (Escape) Define numeric parameter, the digits are taken as a
               parameter to the next command.  The commands that accept a
               parameter are _^^^^_FFFF, _^^^^_BBBB, _e_r_a_s_e, _^^^^_CCCC, _^^^^_DDDD, _^^^^_KKKK, _^^^^_RRRR, _^^^^_PPPP, _^^^^_NNNN, _^^^^_]]]], _MMMM_----_....,
               _MMMM_----_^^^^_]]]], _MMMM_----_____, _MMMM_----_bbbb, _MMMM_----_cccc, _MMMM_----_dddd, _MMMM_----_ffff, _MMMM_----_hhhh _MMMM_----_llll and _MMMM_----_^^^^_HHHH.
     _MMMM_----_l_e_t_t_e_r  Soft-key - Your alias list is searched for an alias by the name
               ______l_e_t_t_e_r and if an alias of this name is defined, its value will
               be inserted on the input queue.  The _l_e_t_t_e_r must not be one of
               the above meta-functions.  _MMMM_----_]]]]_l_e_t_t_e_r Soft-key - Your alias list
               is searched for an alias by the name ___________l_e_t_t_e_r and if an alias
               of this name is defined, its value will be inserted on the
               input queue.  The can be used to program functions keys on many
               terminals.
     _MMMM_----_....       The last word of the previous command is inserted on the line.
               If preceded by a numeric parameter, the value of this parameter
               determines which word to insert rather than the last word.
     _MMMM_----_____       Same as _MMMM_----_.....
     _MMMM_----_****       Attempt file name generation on the current word.  An asterisk
               is appended if the word doesn't match any file or contain any
               special pattern characters.
     _MMMM_----_EEEE_SSSS_CCCC     File name completion.  Replaces the current word with the
               longest common prefix of all filenames matching the current
               word with an asterisk appended.  If the match is unique, a _//// is
               appended if the file is a directory and a space is appended if
               the file is not a directory.
     _MMMM_----_====       List files matching current word pattern if an asterisk were
               appended.
     _^^^^_UUUU        Multiply parameter of next command by 4.
     _\\\\         Escape next character.  Editing characters, the user's erase,
               kill and interrupt (normally _^^^^_????)  characters may be entered in
               a command line or in a search string if preceded by a _\\\\.  The _\\\\
               removes the next character's editing features (if any).
     _^^^^_VVVV        Display version of the shell.
     _MMMM_----_####       Insert a _#### at the beginning of the line and execute it.  This
               causes a comment to be inserted in the history file.

   vvvviiii EEEEddddiiiittttiiiinnnngggg MMMMooooddddeeee
     There are two typing modes.  Initially, when you enter a command you are
     in the _i_n_p_u_t mode.  To edit, the user enters _c_o_n_t_r_o_l mode by typing ESC
     (_\\\\_0000_3333_3333), moves the cursor to the point needing correction, and inserts or
     deletes characters or words as needed.  Most control commands accept an
     optional repeat _c_o_u_n_t prior to the command.

     When in _vvvv_iiii mode on most systems, canonical processing is initially
     enabled and the command is echoed again if the speed is 1200 baud or
     greater and it contains any control characters or less than one second
     has elapsed since the prompt was printed.  The ESC character terminates
     canonical processing for the remainder of the command and the user can
     modify the command line.  This scheme has the advantages of canonical
     processing with the type-ahead echoing of raw mode.



                                                                       PPPPaaaaggggeeee 22221111






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     If the option _vvvv_iiii_rrrr_aaaa_wwww is also set, the terminal always has canonical
     processing disabled.

   IIIInnnnppppuuuutttt EEEEddddiiiitttt CCCCoooommmmmmmmaaaannnnddddssss
     By default the editor is in input mode.

     _e_r_a_s_e   (User defined erase character as defined by the stty command,
             usually _^^^^_HHHH or _####.)  Delete previous character.

     _^^^^_WWWW      Delete the previous blank separated word.

     _^^^^_DDDD      Terminate the shell.

     _^^^^_VVVV      Escape next character.  Editing characters, the user's erase or
             kill characters may be entered in a command line or in a search
             string if preceded by a _^^^^_VVVV.  The _^^^^_VVVV removes the next character's
             editing features (if any).

     _\\\\       Escape the next _e_r_a_s_e or _kkkk_iiii_llll_llll character.

   MMMMoooottttiiiioooonnnn EEEEddddiiiitttt CCCCoooommmmmmmmaaaannnnddddssss
     These commands move the cursor.

     [_c_o_u_n_t]_llll    Cursor forward (right) one character.

     [_c_o_u_n_t]_wwww    Cursor forward one alpha-numeric word.

     [_c_o_u_n_t]_WWWW    Cursor to the beginning of the next word that follows a
                 blank.

     [_c_o_u_n_t]_eeee    Cursor to end of word.

     [_c_o_u_n_t]_EEEE    Cursor to end of the current blank delimited word.

     [_c_o_u_n_t]_hhhh    Cursor backward (left) one character.

     [_c_o_u_n_t]_bbbb    Cursor backward one word.

     [_c_o_u_n_t]_BBBB    Cursor to preceding blank separated word.

     [_c_o_u_n_t]_||||    Cursor to column _c_o_u_n_t.

     [_c_o_u_n_t]_ffff_c   Find the next character _c in the current line.

     [_c_o_u_n_t]_FFFF_c   Find the previous character _c in the current line.

     [_c_o_u_n_t]_tttt_c   Equivalent to _ffff followed by _hhhh.

     [_c_o_u_n_t]_TTTT_c   Equivalent to _FFFF followed by _llll.






                                                                       PPPPaaaaggggeeee 22222222






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     [_c_o_u_n_t]_;;;;    Repeats _c_o_u_n_t times, the last single character find command,
                 _ffff, _FFFF, _tttt, or _TTTT.

     [_c_o_u_n_t]_,,,,    Reverses the last single character find command _c_o_u_n_t times.

     _0000           Cursor to start of line.

     _^^^^           Cursor to first non-blank character in line.

     _$$$$           Cursor to end of line.

   SSSSeeeeaaaarrrrcccchhhh EEEEddddiiiitttt CCCCoooommmmmmmmaaaannnnddddssss
     These commands access your command history.

     [_c_o_u_n_t]_kkkk    Fetch previous command.  Each time _kkkk is entered the previous
                 command back in time is accessed.

     [_c_o_u_n_t]_----    Equivalent to _kkkk.

     [_c_o_u_n_t]_jjjj    Fetch next command.  Each time _jjjj is entered the next command
                 forward in time is accessed.

     [_c_o_u_n_t]_++++    Equivalent to _jjjj.

     [_c_o_u_n_t]_GGGG    The command number _c_o_u_n_t is fetched.  The default is the
                 least recent history command.

     _////_s_t_r_i_n_g     Search backward through history for a previous command
                 containing _s_t_r_i_n_g.  _S_t_r_i_n_g is terminated by a "RETURN" or
                 "NEW LINE".  If string is preceded by a _^^^^, the matched line
                 must begin with _s_t_r_i_n_g.  If _s_t_r_i_n_g is null the previous
                 string is used.

     _????_s_t_r_i_n_g     Same as _//// except that search is in the forward direction.

     _nnnn           Search for next match of the last pattern to _//// or _????
                 commands.

     _NNNN           Search for next match of the last pattern to _//// or _????, but in
                 reverse direction.  Search history for the _s_t_r_i_n_g entered by
                 the previous _//// command.

   TTTTeeeexxxxtttt MMMMooooddddiiiiffffiiiiccccaaaattttiiiioooonnnn EEEEddddiiiitttt CCCCoooommmmmmmmaaaannnnddddssss
     These commands modify the line.

     _aaaa                Enter input mode and enter text after the current
                      character.

     _AAAA                Append text to the end of the line.  Equivalent to _$$$$_aaaa.






                                                                       PPPPaaaaggggeeee 22223333






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     [_c_o_u_n_t]_cccc_m_o_t_i_o_n
     _cccc[_c_o_u_n_t]_m_o_t_i_o_n   Delete current character through the character that
                      _m_o_t_i_o_n would move the cursor to and enter input mode.
                      If _m_o_t_i_o_n is _cccc, the entire line is deleted and input
                      mode entered.

     _CCCC                Delete the current character through the end of line and
                      enter input mode.  Equivalent to _cccc_$$$$.

     _SSSS                Equivalent to _cccc_cccc.

     _DDDD                Delete the current character through the end of line.
                      Equivalent to _dddd_$$$$.

     [_c_o_u_n_t]_dddd_m_o_t_i_o_n
     _dddd[_c_o_u_n_t]_m_o_t_i_o_n   Delete current character through the character that
                      _m_o_t_i_o_n would move to.  If _m_o_t_i_o_n is _dddd, the entire line
                      is deleted.

     _iiii                Enter input mode and insert text before the current
                      character.

     _IIII                Insert text before the beginning of the line.
                      Equivalent to _0000_iiii.

     [_c_o_u_n_t]_PPPP         Place the previous text modification before the cursor.

     [_c_o_u_n_t]_pppp         Place the previous text modification after the cursor.

     _RRRR                Enter input mode and replace characters on the screen
                      with characters you type overlay fashion.

     [_c_o_u_n_t]_rrrr_c        Replace the _c_o_u_n_t character(s) starting at the current
                      cursor position with _c, and advance the cursor.

     [_c_o_u_n_t]_xxxx         Delete current character.

     [_c_o_u_n_t]_XXXX         Delete preceding character.

     [_c_o_u_n_t]_....         Repeat the previous text modification command.

     [_c_o_u_n_t]_~~~~         Invert the case of the _c_o_u_n_t character(s) starting at
                      the current cursor position and advance the cursor.

     [_c_o_u_n_t]_____         Causes the _c_o_u_n_t word of the previous command to be
                      appended and input mode entered.  The last word is used
                      if _c_o_u_n_t is omitted.

     _****                Causes an _**** to be appended to the current word and
                      filename generation attempted.  If no match is found, it
                      rings the bell.  Otherwise, the word is replaced by the
                      matching pattern and input mode is entered.



                                                                       PPPPaaaaggggeeee 22224444






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _\\\\                Filename completion.  Replaces the current word with the
                      longest common prefix of all filenames matching the
                      current word with an asterisk appended.  If the match is
                      unique, a _//// is appended if the file is a directory and a
                      space is appended if the file is not a directory.

   OOOOtttthhhheeeerrrr EEEEddddiiiitttt CCCCoooommmmmmmmaaaannnnddddssss
     Miscellaneous commands.

     [_c_o_u_n_t]_yyyy_m_o_t_i_o_n
     _yyyy[_c_o_u_n_t]_m_o_t_i_o_n   Yank current character through character that _m_o_t_i_o_n
                      would move the cursor to and puts them into the delete
                      buffer.  The text and cursor are unchanged.

     _YYYY                Yanks from current position to end of line.  Equivalent
                      to _yyyy_$$$$.

     _uuuu                Undo the last text modifying command.

     _UUUU                Undo all the text modifying commands performed on the
                      line.

     [_c_o_u_n_t]_vvvv         Returns the command _ffff_cccc _----_eeee _$$$$_{{{{_VVVV_IIII_SSSS_UUUU_AAAA_LLLL_::::_----_$$$$_{{{{_EEEE_DDDD_IIII_TTTT_OOOO_RRRR_::::_----_vvvv_iiii_}}}}_}}}} _c_o_u_n_t
                      in the input buffer.  If _c_o_u_n_t is omitted, the current
                      line is used.

     _^^^^_LLLL               Line feed and print current line.  Has effect only in
                      control mode.

     _^^^^_JJJJ               (New line) Execute the current line, regardless of mode.

     _^^^^_MMMM               (Return) Execute the current line, regardless of mode.

     _####                Sends the line after inserting a _#### in front of the line.
                      Useful for causing the current line to be inserted in
                      the history without being executed.

     _====                List the filenames that match the current word if an
                      asterisk were appended it.

     _@@@@_l_e_t_t_e_r          Your alias list is searched for an alias by the name
                      ______l_e_t_t_e_r and if an alias of this name is defined, its
                      value is inserted on the input queue for processing.

   SSSSppppeeeecccciiiiaaaallll CCCCoooommmmmmmmaaaannnnddddssss
     The following simple-commands are executed in the shell process.
     Input/output redirection is permitted.  Unless otherwise indicated, the
     output is written on file descriptor 1 and the exit status, when there is
     no syntax error, is zero.  Commands that are followed by one or two
     asterisks, * or **, are treated specially in the following ways:





                                                                       PPPPaaaaggggeeee 22225555






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     1.   Variable assignment lists preceding the command remain in effect
          when the command completes.

     2.   I/O redirections are processed after variable assignments.

     3.   Errors cause a script that contains them to abort.

     4.   Words, following a command followed by ** that are in the format of
          a variable assignment, are expanded with the same rules as a
          variable assignment.  This means that tilde substitution is
          performed after the _==== sign and word splitting and filename
          generation are not performed.

     _:::: [ _a_r_g ... ]     *
          The command only expands parameters.

     _.... _f_i_l_e [ _a_r_g ... ]     *
          Read the complete _f_i_l_e and execute the commands.  The commands are
          executed in the current shell environment.  The search path
          specified by _PPPP_AAAA_TTTT_HHHH is used to find the directory containing _f_i_l_e.  If
          any arguments _a_r_g are given, they become the positional parameters.
          Otherwise the positional parameters are unchanged.  The exit status
          is the exit status of the last command executed.

     _aaaa_llll_iiii_aaaa_ssss [ _----_tttt_xxxx ] [ _n_a_m_e[_====_v_a_l_u_e ] ] ...     **
          _A_l_i_a_s with no arguments prints the list of aliases in the form
          _n_a_m_e=_v_a_l_u_e on standard output.  An _a_l_i_a_s is defined for each name
          whose _v_a_l_u_e is given.  A trailing space in _v_a_l_u_e causes the next
          word to be checked for alias substitution.  The _----_tttt flag is used to
          set and list tracked aliases.  The value of a tracked alias is the
          full pathname corresponding to the given _n_a_m_e.  The value becomes
          undefined when the value of _PPPP_AAAA_TTTT_HHHH is reset but the aliases remain
          tracked.  Without the _----_tttt flag, for each _n_a_m_e in the argument list
          for which no _v_a_l_u_e is given, the name and value of the alias is
          printed.  The _----_xxxx flag is used to set or print exported aliases.  An
          exported alias is defined for scripts invoked by name.  The exit
          status is nonzero if a _n_a_m_e is given, but no value, for which no
          alias has been defined.

     _bbbb_gggg [ _j_o_b... ]
          This command is only on systems that support job control.  Puts each
          specified _j_o_b into the background.  The current job is put in the
          background if _j_o_b is not specified.  See JJJJoooobbbbssss for a description of
          the format of _j_o_b.

     _bbbb_rrrr_eeee_aaaa_kkkk [ _n ]     *
          Exit from the enclosing _ffff_oooo_rrrr, _wwww_hhhh_iiii_llll_eeee, _uuuu_nnnn_tttt_iiii_llll or _ssss_eeee_llll_eeee_cccc_tttt loop, if any.
          If _n is specified, break _n levels.

     _cccc_oooo_mmmm_mmmm_aaaa_nnnn_dddd [ _----_pppp ] _c_o_m_m_a_n_d__n_a_m_e [ _a_r_g_u_m_e_n_t ... ]





                                                                       PPPPaaaaggggeeee 22226666






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _cccc_oooo_mmmm_mmmm_aaaa_nnnn_dddd [ _----_vvvv _|||| _----_VVVV ] _c_o_m_m_a_n_d__n_a_m_e
          The _c_o_m_m_a_n_d utility causes the shell to treat the arguments as a
          simple command, suppressing the shell function lookup.  If the
          _c_o_m_m_a_n_d__n_a_m_e is the same as the name of one of the special builtin
          utilities, the special properties in the enumerated list at the
          beginning of SSSSppppeeeecccciiiiaaaallll CCCCoooommmmmmmmaaaannnnddddssss section do not occur.  In every other
          respect, if _c_o_m_m_a_n_d__n_a_m_e is not the name of a function, the effect
          of _c_o_m_m_a_n_d are the same as omitting _c_o_m_m_a_n_d.

          The _----_pppp option performs the search using a default value for _P_A_T_H
          that is guaranteed to find all of the standard utilities.

          The _----_vvvv option writes a string to standard output that indicates the
          pathname or command that will be used by the shell, in the current
          execution environment, to invoke _c_o_m_m_a_n_d__n_a_m_e.

          The _----_VVVV option writes a string to standard output that indicates how
          the name given in the _c_o_m_m_a_n_d__n_a_m_e operand is interpreted by the
          shell in the current shell execution environment.  It indicates in
          which of the following categories _c_o_m_m_a_n_d__n_a_m_e falls and include the
          information stated:

          Utilities, regular builtin utilities, and any implementation-
          provided functions that are found using the _P_A_T_H variable are
          identified as such and include the absolute pathname in the string.

          Other shell functions are identified as functions.

          Aliases are identified as aliases and their definitions are included
          in the string.

          Special builtin utilities are identified as special builtin
          utilities.

          Regular builtin utilities not associated with a _P_A_T_H search are
          identified as regular builtin utilities.

          Shell reserved words are identified as reserved words.

     _cccc_oooo_nnnn_tttt_iiii_nnnn_uuuu_eeee [ _n ]     *
          Resume the next iteration of the enclosing _ffff_oooo_rrrr, _wwww_hhhh_iiii_llll_eeee, _uuuu_nnnn_tttt_iiii_llll or
          _ssss_eeee_llll_eeee_cccc_tttt loop.  If _n is specified, resume at the _n-th enclosing loop.

     _cccc_dddd _[[[[ _----_LLLL_PPPP _]]]]   _a_r_g
     _cccc_dddd _[[[[ _----_LLLL_PPPP _]]]]  _o_l_d _n_e_w
          This command can be in either of two forms.  In the first form it
          changes the current directory to _a_r_g.  If _a_r_g is _---- the directory is
          changed to the previous directory.  The shell variable _HHHH_OOOO_MMMM_EEEE is the
          default _a_r_g.  The variable _PPPP_WWWW_DDDD is set to the current directory.  The
          shell variable _CCCC_DDDD_PPPP_AAAA_TTTT_HHHH defines the search path for the directory
          containing _a_r_g.  Alternative directory names are separated by a
          colon (_::::).  The default path is _<<<<_nnnn_uuuu_llll_llll_>>>> (specifying the current



                                                                       PPPPaaaaggggeeee 22227777






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          directory).  Note that the current directory is specified by a null
          pathname, which can appear immediately after the equal sign or
          between the colon delimiters anywhere else in the path list.  If _a_r_g
          begins with a _//// the search path is not used.  Otherwise, each
          directory in the path is searched for _a_r_g.

          The second form of _cccc_dddd substitutes the string _n_e_w for the string _o_l_d
          in the current directory name, _PPPP_WWWW_DDDD and tries to change to this new
          directory.

          If you specify _----_LLLL, _ssss_hhhh does not resolve symbolic links.  This is the
          default behavior.

          If you specify _----_PPPP, _ssss_hhhh resolves all symbolic links.

          If you specify both _----_LLLL and _----_PPPP, the last option specifies the
          behavior.

          The _cccc_dddd command may not be executed by restricted _ssss_hhhh.

     _eeee_cccc_hhhh_oooo [ _a_r_g ... ]
          See _eeee_cccc_hhhh_oooo(1) for usage and description.

     _eeee_vvvv_aaaa_llll [ _a_r_g ... ]     *
          The arguments are read as input to the shell and the resulting
          command(s) executed.

     _eeee_xxxx_eeee_cccc [ _a_r_g ... ]     *
          If _a_r_g is given, the command specified by the arguments is executed
          in place of this shell without creating a new process.  Input/output
          arguments may appear and affect the current process.  If no
          arguments are given the effect of this command is to modify file
          descriptors as prescribed by the input/output redirection list.  In
          this case, any file descriptor numbers greater than 2 that are
          opened with this mechanism are closed when invoking another program.

     _eeee_xxxx_iiii_tttt [ _n ]     *
          Causes the shell to exit with the exit status specified by _n.  If _n
          is omitted the exit status is that of the last command executed.  An
          end-of-file also causes the shell to exit except for a shell which
          has the _i_g_n_o_r_e_e_o_f option (see _ssss_eeee_tttt below) turned on.

     _eeee_xxxx_pppp_oooo_rrrr_tttt [ _n_a_m_e[_====_v_a_l_u_e ] ] ...     **
          The given _n_a_m_es are marked for automatic export to the _e_n_v_i_r_o_n_m_e_n_t
          of subsequently-executed commands.

     _eeee_xxxx_pppp_oooo_rrrr_tttt _----_pppp     **
          When _----_pppp is specified, _e_x_p_o_r_t writes to the standard the output names
          and values of all exported variables, in the following format:






                                                                       PPPPaaaaggggeeee 22228888






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



               "export %s=%s\n",< _n_a_m_e >, < _v_a_l_u_e >

          The _----_pppp option allows portable access to the values that can be saved
          and later restored using, for instance, a dot script.

          The shell formats the output, including the proper use of quoting,
          so that it is suitable for reinput to the shell as commands that
          achieve the same exporting results.

     _ffff_cccc [ _----_eeee _e_n_a_m_e ] [ _----_nnnn_llll_rrrr ] [ _f_i_r_s_t [ _l_a_s_t ] ]
     _ffff_cccc _----_eeee _---- [ _o_l_d_====_n_e_w ] [ _c_o_m_m_a_n_d ]
     _ffff_cccc _----_ssss [ _o_l_d_====_n_e_w ] [ _f_i_r_s_t ]
          In the first form, a range of commands from _f_i_r_s_t to _l_a_s_t is
          selected from the last _HHHH_IIII_SSSS_TTTT_SSSS_IIII_ZZZZ_EEEE commands that were typed at the
          terminal.  The arguments _f_i_r_s_t and _l_a_s_t may be specified as a
          [+]number or as a string.  A string is used to locate the most
          recent command starting with the given string.  A negative number is
          used as an offset to the current command number.  If the flag _----_llll, is
          selected, the commands are listed on standard output.  Otherwise,
          the editor program _e_n_a_m_e is invoked on a file containing these
          keyboard commands.  If _e_n_a_m_e is not supplied, the value of the
          variable _FFFF_CCCC_EEEE_DDDD_IIII_TTTT (default _////_uuuu_ssss_rrrr_////_bbbb_iiii_nnnn_////_eeee_dddd) is used as the editor.  When
          editing is complete, the edited command(s) is executed.  If _l_a_s_t is
          not specified it is set to _f_i_r_s_t.  If _f_i_r_s_t is not specified the
          default is the previous command for editing and -16 for listing.
          The flag _----_rrrr reverses the order of the commands and the flag _----_nnnn
          suppresses command numbers when listing.  In the second form the
          _c_o_m_m_a_n_d is re-executed after the substitution _o_l_d_====_n_e_w is performed.
          In the third form the _c_o_m_m_a_n_d is re-executed after the substitution
          _o_l_d_====_n_e_w is performed without invoking an editor.

     _ffff_gggg [ _j_o_b... ]
          This command is only on systems that support job control.  Each _j_o_b
          specified is brought to the foreground.  Otherwise, the current job
          is brought into the foreground.  See JJJJoooobbbbssss for a description of the
          format of _j_o_b.

     _gggg_eeee_tttt_oooo_pppp_tttt_ssss _o_p_t_s_t_r_i_n_g _n_a_m_e [ _a_r_g ... ]
          Checks _a_r_g for legal options.  If _a_r_g is omitted, the positional
          parameters are used.  An option argument begins with a _++++ or a _----.  An
          option not beginning with _++++ or _---- or the argument _----_---- ends the
          options.  _o_p_t_s_t_r_i_n_g contains the letters that _gggg_eeee_tttt_oooo_pppp_tttt_ssss recognizes.
          If a letter is followed by a _::::, that option is expected to have an
          argument.  The options can be separated from the argument by blanks.

          _gggg_eeee_tttt_oooo_pppp_tttt_ssss places the next option letter it finds inside variable _n_a_m_e
          each time it is invoked with a _++++ prepended when _a_r_g begins with a _++++.
          The index of the next _a_r_g is stored in _OOOO_PPPP_TTTT_IIII_NNNN_DDDD.  The option argument,
          if any, gets stored in _OOOO_PPPP_TTTT_AAAA_RRRR_GGGG.  Whenever the shell is invoked,
          _OOOO_PPPP_TTTT_IIII_NNNN_DDDD is initialized to 1.





                                                                       PPPPaaaaggggeeee 22229999






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          A leading _:::: in _o_p_t_s_t_r_i_n_g causes _gggg_eeee_tttt_oooo_pppp_tttt_ssss to store the letter of an
          invalid option in _OOOO_PPPP_TTTT_AAAA_RRRR_GGGG, and to set _n_a_m_e to _????  for an unknown
          option and to _:::: when a required option is missing.  Otherwise,
          _gggg_eeee_tttt_oooo_pppp_tttt_ssss prints an error message.  The exit status is nonzero when
          there are no more options.

     _jjjj_oooo_bbbb_ssss [ _----_llll_nnnn_pppp ] [ _j_o_b ... ]
          Lists information about each given job; or all active jobs if _j_o_b is
          omitted.  The _----_llll flag lists process ids in addition to the normal
          information.  The _----_nnnn flag only displays jobs that have stopped or
          exited since last notified.  The _----_pppp flag causes only the process
          group to be listed.  See JJJJoooobbbbssss for a description of the format of
          _j_o_b.

     _kkkk_iiii_llll_llll [ -_s_i_g ] _j_o_b ...
     _kkkk_iiii_llll_llll [ -_s_i_g ] -1
     _kkkk_iiii_llll_llll _----_ssss _s_i_g_n_a_l__n_a_m_e _j_o_b ...
     _kkkk_iiii_llll_llll _----_llll [ _e_x_i_t__s_t_a_t_u_s ]
          Sends either the TERM (terminate) signal or the specified signal to
          the specified jobs or processes.  In the second form, the TERM
          (terminate) or specified signal is sent to all processes owned by
          the user.  Signals are either given by number or by names (as given
          in _////_uuuu_ssss_rrrr_////_iiii_nnnn_cccc_llll_uuuu_dddd_eeee_////_ssss_iiii_gggg_nnnn_aaaa_llll_...._hhhh, stripped of the prefix ``SIG'').  If the
          signal being sent is TERM (terminate) or HUP (hangup), the job or
          process is sent a CONT (continue) signal if it is stopped.  The
          argument _j_o_b can the process id of a process that is not a member of
          one of the active jobs.  See JJJJoooobbbbssss for a description of the format of
          _j_o_b.  In the fourth form, _kkkk_iiii_llll_llll _----_llll, the signal numbers and names are
          listed.  If an _e_x_i_t__s_t_a_t_u_s operand is given and it is the unsigned
          decimal integer value of a signal number, the _s_i_g_n_a_l__n_a_m_e (the
          specification-defined symbolic constant name without the ``SIG''
          prefix) corresponding to that signal is written.

     _llll_eeee_tttt _a_r_g ...
          Each _a_r_g is a separate _a_r_i_t_h_m_e_t_i_c _e_x_p_r_e_s_s_i_o_n to be evaluated.  See
          AAAArrrriiiitttthhhhmmmmeeeettttiiiicccc EEEEvvvvaaaalllluuuuaaaattttiiiioooonnnn above, for a description of arithmetic
          expression evaluation.

          The exit status is 0 if the value of the last expression is nonzero,
          and 1 otherwise.

     _llll_iiii_mmmm_iiii_tttt [ _----_hhhh ] _r_e_s_o_u_r_c_e _m_a_x_i_m_u_m-_u_s_e
          This is the Bourne shell version included for backward
          compatibility.  Limits the consumption by the current process and
          each process it creates to not individually exceed _m_a_x_i_m_u_m-_u_s_e on
          the specified _r_e_s_o_u_r_c_e.  If no _m_a_x_i_m_u_m-_u_s_e is given, then the
          current limit is printed; if no _r_e_s_o_u_r_c_e is given, then all
          limitations are given.  If the ----hhhh flag is given, the hard limits are
          used instead of the current limits.  The hard limits impose a
          ceiling on the values of the current limits.  Only the superuser can
          raise the hard limits, but a user can lower or raise the current
          limits within the legal range.



                                                                       PPPPaaaaggggeeee 33330000






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          Resources controllable currently include _c_p_u_t_i_m_e, the maximum number
          of cpu-seconds to be used by each process, _f_i_l_e_s_i_z_e, the largest
          single file that can be created, _d_a_t_a_s_i_z_e, the maximum growth of the
          data region via _s_b_r_k(2) beyond the end of the program text,
          _s_t_a_c_k_s_i_z_e, the maximum size of the automatically-extended stack
          region, _c_o_r_e_d_u_m_p_s_i_z_e, the size of the largest core dump created,
          _m_e_m_o_r_y_u_s_e, the maximum amount of physical memory a process can have
          allocated to it at a given time, _d_e_s_c_r_i_p_t_o_r_s, the maximum number of
          open files, _v_m_e_m_o_r_y, the maximum total virtual size of the process,
          including text, data, heap, shared memory, mapped files, stack, and
          so on, and _t_h_r_e_a_d_s, the maximum number of _p_t_h_r_e_a_d_s(5) the process
          may create.

          The _m_a_x_i_m_u_m-_u_s_e can be given as a (floating point or integer) number
          followed by a scale factor.  For all limits other than _c_p_u_t_i_m_e,
          _d_e_s_c_r_i_p_t_o_r_s and _t_h_r_e_a_d_s the default scale is kkkk or kkkkiiiilllloooobbbbyyyytttteeeessss (1024
          bytes); a scale factor of mmmm or mmmmeeeeggggaaaabbbbyyyytttteeeessss can also be used.  For
          _c_p_u_t_i_m_e the default scaling is sssseeeeccccoooonnnnddddssss, while mmmm for minutes or hhhh for
          hours, or a time of the form _m_m::::_s_s giving minutes and seconds can be
          used.

          For both _r_e_s_o_u_r_c_e names and scale factors, unambiguous prefixes of
          the names suffice.

     _nnnn_eeee_wwww_gggg_rrrr_pppp [ _----_llll ] [ _a_r_g ]     *
     _nnnn_eeee_wwww_gggg_rrrr_pppp [ _---- ] [ _a_r_g ]     *
          Equivalent to _eeee_xxxx_eeee_cccc _////_uuuu_ssss_rrrr_////_bbbb_iiii_nnnn_////_nnnn_eeee_wwww_gggg_rrrr_pppp _a_r_g.  The _----_llll (ell) or the _----
          option change the environment to what would be expected if the user
          actually logged in again.

     _pppp_rrrr_iiii_nnnn_tttt [ _----_RRRR_nnnn_pppp_rrrr_ssss_uuuu[_n ] ] [ _a_r_g ... ]
          The shell output mechanism.  With no flags or with flag _---- or _----_---- the
          arguments are printed on standard output as described by _eeee_cccc_hhhh_oooo(1).
          In raw mode, _----_RRRR or _----_rrrr, the escape conventions of _eeee_cccc_hhhh_oooo are ignored.
          The _----_RRRR option prints all subsequent arguments and options other than
          _----_nnnn.  The _----_pppp option causes the arguments to be written onto the pipe
          of the process spawned with _||||_&&&& instead of standard output.  The _----_ssss
          option causes the arguments to be written onto the history file
          instead of standard output.  The _----_uuuu flag can be used to specify a
          one digit file descriptor unit number _nnnn on which the output is
          placed.  The default is 1.  If the flag _----_nnnn is used, no newline is
          added to the output.

     _pppp_wwww_dddd _[[[[ _----_LLLL_PPPP _]]]]
          This is equivalent to _pppp_rrrr_iiii_nnnn_tttt _----_rrrr _---- _$$$$_PPPP_WWWW_DDDD if you have not changed _PPPP_WWWW_DDDD.

          If you specify _----_LLLL, _ssss_hhhh does not resolve symbolic links.  This is the
          default behavior.

          If you specify _----_PPPP, _ssss_hhhh resolves all symbolic links.





                                                                       PPPPaaaaggggeeee 33331111






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          If you specify both _----_LLLL and _----_PPPP, the last option specifies the
          behavior.

     _rrrr_eeee_aaaa_dddd [ _----_pppp_rrrr_ssss_uuuu[ _n ] ] [ _n_a_m_e_????_p_r_o_m_p_t ] [ _n_a_m_e ... ]
          The shell input mechanism.  One line is read and is broken up into
          fields using the characters in _IIII_FFFF_SSSS as separators.  In raw mode, _----_rrrr_,,,,
          a _\\\\ at the end of a line does not signify line continuation.  The
          first field is assigned to the first _n_a_m_e, the second field to the
          second _n_a_m_e, and so on, with leftover fields assigned to the last
          _n_a_m_e.  The _----_pppp option causes the input line to be taken from the
          input pipe of a process spawned by the shell using _||||_&&&&.  If the _----_ssss
          flag is present, the input is saved as a command in the history
          file.  The flag _----_uuuu can be used to specify a one digit file
          descriptor unit to read from.  The file descriptor can be opened
          with the _eeee_xxxx_eeee_cccc special command.  The default value of _n is 0.  If
          _n_a_m_e is omitted _RRRR_EEEE_PPPP_LLLL_YYYY is used as the default _n_a_m_e.  The exit status
          is 0 unless an end-of-file is encountered.  An end-of-file with the
          _----_pppp option causes cleanup for this process so that another can be
          spawned.  If the first argument contains a _????, the remainder of this
          word is used as a _p_r_o_m_p_t on standard error when the shell is
          interactive.  The exit status is 0 unless an end-of-file is
          encountered.

     _rrrr_eeee_aaaa_dddd_oooo_nnnn_llll_yyyy [ _n_a_m_e[_====_v_a_l_u_e] ] ...     **
          The given _n_a_m_es are marked readonly and these names cannot be
          changed by subsequent assignment.

     _rrrr_eeee_aaaa_dddd_oooo_nnnn_llll_yyyy _----_pppp     **
          When _----_pppp is specified, _r_e_a_d_o_n_l_y writes to the standard the output
          names and values of all read-only variables, in the following
          format:

               "readonly %s=%s\n",< _n_a_m_e >, < _v_a_l_u_e >

          The _----_pppp option allows portable access to the values that can be saved
          and later restored using, for instance, a dot script.

          The shell formats the output, including the proper use of quoting,
          so that it is suitable for reinput to the shell as commands that
          achieve the same attribute-setting results.

     _rrrr_eeee_tttt_uuuu_rrrr_nnnn [ _n ]     *
          Causes a shell _f_u_n_c_t_i_o_n to return to the invoking script with the
          return status specified by _n.  If _n is omitted the return status is
          that of the last command executed.  If _rrrr_eeee_tttt_uuuu_rrrr_nnnn is invoked while not
          in a _f_u_n_c_t_i_o_n or a _....  script, it is the same as an _eeee_xxxx_iiii_tttt.

     _ssss_eeee_tttt [ _----_aaaa_bbbb_CCCC_eeee_ffff_hhhh_kkkk_mmmm_nnnn_pppp_ssss_tttt_uuuu_vvvv_xxxx ] [ _----_oooo _o_p_t_i_o_n ] [ _----_AAAA _n_a_m_e ] [ _a_r_g ... ]     *
          The flags for this command have meaning as follows:






                                                                       PPPPaaaaggggeeee 33332222






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          _----_AAAA   Array assignment.  Unset the variable _n_a_m_e and assign values
               sequentially from the list _a_r_g.  If _++++_AAAA is used, the variable
               _n_a_m_e is not unset first.

          _----_aaaa   All subsequent variables that are defined are automatically
               exported.

          _----_bbbb   Cause the shell to notify the user asynchronously of background
               job completions.  When the shell notifies the user a job has
               been completed, it may remove the job's process ID from the
               list of those known in the current shell execution environment.
               Asynchronous notification is not enabled by default.

          _----_CCCC   (Upper-case C) Prevent existing files from being overwritten by
               the shell's > redirection operator.  The >| redirection
               operator overrides this _n_o_c_l_o_b_b_e_r option for an individual
               file.

          _----_eeee   If a command has a nonzero exit status, execute the _EEEE_RRRR_RRRR trap,
               if set, and exit.  This mode is disabled while reading
               profiles.

          _----_ffff   Disables filename generation.

          _----_hhhh   Each command becomes a tracked alias when first encountered.

          _----_kkkk   All variable assignment arguments are placed in the environment
               for a command, not just those that precede the command name.

          _----_mmmm   Background jobs run in a separate process group and a line
               prints upon completion.  The exit status of background jobs is
               reported in a completion message.  On systems with job control,
               this flag is turned on automatically for interactive shells.

          _----_nnnn   Read commands and check them for syntax errors, but do not
               execute them.  Ignored for interactive shells.

          _----_oooo   The following argument can be one of the following option
               names:

               _aaaa_llll_llll_eeee_xxxx_pppp_oooo_rrrr_tttt    Same as _----_aaaa.

               _eeee_rrrr_rrrr_eeee_xxxx_iiii_tttt      Same as _----_eeee.

               _bbbb_gggg_nnnn_iiii_cccc_eeee       All background jobs are run at a lower priority.
                            This is the default mode.

               _eeee_mmmm_aaaa_cccc_ssss        Puts you in an _e_m_a_c_s style in-line editor for
                            command entry.






                                                                       PPPPaaaaggggeeee 33333333






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



               _iiii_gggg_nnnn_oooo_rrrr_eeee_eeee_oooo_ffff    The shell does not exit on end-of-file.  The
                            command _eeee_xxxx_iiii_tttt must be used.

               _kkkk_eeee_yyyy_wwww_oooo_rrrr_dddd      Same as _----_kkkk.

               _mmmm_aaaa_rrrr_kkkk_dddd_iiii_rrrr_ssss     All directory names resulting from filename
                            generation have a trailing _//// appended.

               _mmmm_oooo_nnnn_iiii_tttt_oooo_rrrr      Same as _----_mmmm.

               _nnnn_oooo_cccc_llll_oooo_bbbb_bbbb_eeee_rrrr    Same as _----_CCCC.

               _nnnn_oooo_eeee_xxxx_eeee_cccc       Same as _----_nnnn.

               _nnnn_oooo_gggg_llll_oooo_bbbb       Same as _----_ffff.

               _nnnn_oooo_llll_oooo_gggg        Do not save function definitions in history file.

               _nnnn_oooo_tttt_iiii_ffff_yyyy       Same as _----_bbbb.

               _nnnn_oooo_uuuu_nnnn_ssss_eeee_tttt      Same as _----_uuuu.

               _pppp_rrrr_iiii_vvvv_iiii_llll_eeee_gggg_eeee_dddd   Same as _----_pppp.

               _vvvv_eeee_rrrr_bbbb_oooo_ssss_eeee      Same as _----_vvvv.

               _tttt_rrrr_aaaa_cccc_kkkk_aaaa_llll_llll     Same as _----_hhhh.

               _vvvv_iiii           Puts you in insert mode of a _vvvv_iiii style inline
                            editor until you hit escape character _0000_3333_3333.  This
                            puts you in move mode.  A return sends the line.

               _vvvv_iiii_rrrr_aaaa_wwww        Each character is processed as it is typed in _vvvv_iiii
                            mode.

               _xxxx_tttt_rrrr_aaaa_cccc_eeee       Same as _----_xxxx.

               If no option name is supplied the current option settings are
               printed.

          _----_pppp   Disables processing of the _$$$$_HHHH_OOOO_MMMM_EEEE_////_...._pppp_rrrr_oooo_ffff_iiii_llll_eeee file and uses the
               file _////_eeee_tttt_cccc_////_ssss_uuuu_iiii_dddd______pppp_rrrr_oooo_ffff_iiii_llll_eeee instead of the _EEEE_NNNN_VVVV file.  This mode is
               on whenever the effective uid (gid) is not equal to the real
               uid (gid).  Turning this off causes the effective uid and gid
               to be set to the real uid and gid.

          _----_ssss   Sort the positional parameters lexicographically.

          _----_tttt   Exit after reading and executing one command.






                                                                       PPPPaaaaggggeeee 33334444






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          _----_uuuu   Treat unset parameters as an error when substituting.

          _----_vvvv   Print shell input lines as they are read.

          _----_xxxx   Print commands and their arguments as they are executed.

          _----    Turns off _----_xxxx and _----_vvvv flags and stops examining arguments for
               flags.

          _----_----   Do not change any of the flags; useful in setting _$$$$_1111 to a value
               beginning with _----.  If no arguments follow this flag the
               positional parameters are unset.

          Using _++++ rather than _---- causes these flags to be turned off.  These
          flags can also be used upon invocation of the shell.  The current
          set of flags may be found in _$$$$_----.  Unless _----_AAAA is specified, the
          remaining arguments are positional parameters and are assigned, in
          order, to _$$$$_1111 _$$$$_2222 ....  If no arguments are given the names and values
          of all variables are printed on the standard output.

     _ssss_hhhh_iiii_ffff_tttt [ _n ]     *
          The positional parameters from _$$$$_n_++++_1111 ...  are renamed _$$$$_1111 ..., default
          _n is 1.  The parameter _n can be any arithmetic expression that
          evaluates to a non-negative number less than or equal to _$$$$_####.

     _tttt_iiii_mmmm_eeee_ssss     *
          Print the accumulated user and system times for the shell and for
          processes run from the shell.

     _tttt_rrrr_aaaa_pppp [ _a_r_g ] [ _s_i_g ] ...     *
          _a_r_g is a command to be read and executed when the shell receives
          signal(s) _s_i_g.  (Note that _a_r_g is scanned once when the trap is set
          and once when the trap is taken.)  Each _s_i_g can be given as a number
          or as the name of the signal.  Trap commands are executed in order
          of signal number.  Any attempt to set a trap on a signal that was
          ignored on entry to the current shell is ineffective.  If _a_r_g is
          omitted or is _----, all trap(s) _s_i_g are reset to their original values.
          If _a_r_g is the null string this signal is ignored by the shell and by
          the commands it invokes.  If _s_i_g is _EEEE_RRRR_RRRR, _a_r_g is executed whenever a
          command has a nonzero exit status.  _s_i_g is _DDDD_EEEE_BBBB_UUUU_GGGG _a_r_g is executed
          after each command.  If _s_i_g is _0000 or _EEEE_XXXX_IIII_TTTT and the _tttt_rrrr_aaaa_pppp statement is
          executed inside the body of a function, the command _a_r_g is executed
          after the function completes.  If _s_i_g is _0000 or _EEEE_XXXX_IIII_TTTT for a _tttt_rrrr_aaaa_pppp set
          outside any function the command _a_r_g is executed on exit from the
          shell.  The _tttt_rrrr_aaaa_pppp command with no arguments prints a list of commands
          associated with each signal number.

     _tttt_yyyy_pppp_eeee_ssss_eeee_tttt [ _++++_____HHHH_LLLL_RRRR_ZZZZ_ffff_iiii_llll_rrrr_tttt_uuuu_xxxx[_n] ] [ _n_a_m_e[_====_v_a_l_u_e ] ] ...     **
          Sets attributes and values for shell variables.  When invoked inside
          a function, a new instance of the variable _n_a_m_e is created.  The
          parameter value and type are restored when the function completes.
          The following list of attributes may be specified:



                                                                       PPPPaaaaggggeeee 33335555






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          _----_HHHH   This flag provides UNIX to host-name file mapping on non-UNIX
               machines.

          _----_LLLL   Left justify and remove leading blanks from _v_a_l_u_e.  If _n is
               nonzero it defines the width of the field, otherwise it is
               determined by the width of the value of first assignment.  When
               the variable is assigned to, it is filled on the right with
               blanks or truncated, if necessary, to fit into the field.
               Leading zeros are removed if the _----_ZZZZ flag is also set.  The _----_RRRR
               flag is turned off.

          _----_RRRR   Right justify and fill with leading blanks.  If _n is nonzero it
               defines the width of the field, otherwise it is determined by
               the width of the value of first assignment.  The field is left
               filled with blanks or truncated from the end if the variable is
               reassigned.  The _LLLL flag is turned off.

          _----_ZZZZ   Right justify and fill with leading zeros if the first non-
               blank character is a digit and the _----_LLLL flag has not been set.
               If _n is nonzero it defines the width of the field, otherwise it
               is determined by the width of the value of first assignment.

          _----_ffff   The names refer to function names rather than variable names.
               No assignments can be made and the only other valid flags are
               _----_tttt, _----_uuuu and _----_xxxx.  The flag _----_tttt turns on execution tracing for this
               function.  The flag _----_uuuu causes this function to be marked
               undefined.  The _FFFF_PPPP_AAAA_TTTT_HHHH variable is searched to find the function
               definition when the function is referenced.  The flag _----_xxxx allows
               the function definition to remain in effect across shell
               procedures invoked by name.

          _----_iiii   Variable is an integer.  This makes arithmetic faster.  If _n is
               nonzero it defines the output arithmetic base, otherwise the
               first assignment determines the output base.

          _----_llll   All upper-case characters converted to lower-case.  The upper-
               case flag, _----_uuuu is turned off.

          _----_rrrr   The given _n_a_m_es are marked readonly and these names cannot be
               changed by subsequent assignment.

          _----_tttt   Tags the variables.  Tags are user definable and have no
               special meaning to the shell.

          _----_uuuu   All lower-case characters are converted to upper-case
               characters.  The lower-case flag, _----_llll is turned off.

          _----_xxxx   The given _n_a_m_es are marked for automatic export to the
               _e_n_v_i_r_o_n_m_e_n_t of subsequently-executed commands.






                                                                       PPPPaaaaggggeeee 33336666






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          Using _++++ rather than _---- causes these flags to be turned off.  If no
          _n_a_m_e arguments are given but flags are specified, a list of _n_a_m_e_s
          (and optionally the _vvvv_aaaa_llll_uuuu_eeee_ssss) of the _v_a_r_i_a_b_l_e_s which have these flags
          set is printed.  (Using _++++ rather than _---- keeps the values from being
          printed.)  If no _n_a_m_es and flags are given, the _n_a_m_e_s and _a_t_t_r_i_b_u_t_e_s
          of all _v_a_r_i_a_b_l_e_s are printed.

     _uuuu_llll_iiii_mmmm_iiii_tttt [ _----_[[[[_HHHH_SSSS_]]]]_[[[[_aaaa _|||| _cccc_dddd_ffff_nnnn_ssss_tttt_vvvv_mmmm_pppp_]]]] ]
     _uuuu_llll_iiii_mmmm_iiii_tttt [ _----_[[[[_HHHH_SSSS_]]]]_[[[[_cccc _|||| _dddd _|||| _ffff _|||| _nnnn _|||| _ssss _|||| _tttt _|||| _vvvv _|||| _mmmm _|||| _pppp_]]]] _]]]] _l_i_m_i_t
          _uuuu_llll_iiii_mmmm_iiii_tttt prints or sets hard or soft resource limits.  These limits
          are described in _gggg_eeee_tttt_rrrr_llll_iiii_mmmm_iiii_tttt(2).

          If _l_i_m_i_t is not present, _uuuu_llll_iiii_mmmm_iiii_tttt prints the specified limits.  Any
          number of limits may be printed at one time.  The _----_aaaa option prints
          all limits.

          If _l_i_m_i_t is present, _uuuu_llll_iiii_mmmm_iiii_tttt sets the specified limit to _l_i_m_i_t.  The
          string _uuuu_nnnn_llll_iiii_mmmm_iiii_tttt_eeee_dddd requests the largest valid limit.  Limits may be
          set for only one resource at a time.  Any user may set a soft limit
          to any value below the hard limit.  Any user may lower a hard limit.
          Only a privileged user may raise a hard limit; see _ssss_uuuu(1M).

          The _----_HHHH option specifies a hard limit.  The _----_SSSS option specifies a
          soft limit.  If neither option is specified, _uuuu_llll_iiii_mmmm_iiii_tttt sets both limits
          and prints the soft limit.

          The following options specify the resource whose limits are to be
          printed or set.  If no option is specified, the file size limit is
          printed or set.

          _----_cccc   maximum core file size (in 512-byte blocks)

          _----_dddd   maximum size of data segment or heap (in kbytes)

          _----_ffff   maximum file size (in 512-byte blocks)

          _----_nnnn   maximum file descriptor plus 1

          _----_ssss   maximum size of stack segment (in kbytes).  Note that if this
               is set too high, _ssss_pppp_rrrr_oooo_cccc(2) may fail.

          _----_tttt   maximum CPU time (in seconds)

          _----_vvvv   maximum size of virtual memory (in kbytes)

          _----_mmmm   maximum size of resident memory (in kbytes)

          _----_pppp   maximum number of _p_t_h_r_e_a_d_s(5) that process may create.

          If no option is given, _----_ffff is assumed.





                                                                       PPPPaaaaggggeeee 33337777






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     _uuuu_mmmm_aaaa_ssss_kkkk [ _----_SSSS ][ _m_a_s_k ]
          The user file-creation mask is set to _m_a_s_k [see _uuuu_mmmm_aaaa_ssss_kkkk(2)].  _m_a_s_k can
          either be an octal number or a symbolic value as described in
          _cccc_hhhh_mmmm_oooo_dddd(1).  If a symbolic value is given, the new umask value is the
          complement of the result of applying _m_a_s_k to the complement of the
          previous umask value.  If _m_a_s_k is omitted, the current value of the
          mask is printed.  If _----_SSSS is specified, the symbolic output is in the
          following format:

               "u=%s,g=%s,o=%s\n", _o_w_n_e_r, _g_r_o_u_p, _o_t_h_e_r

          where the three values are permissions combinations of the letters
          from the set {r,w,x}.

     _uuuu_nnnn_aaaa_llll_iiii_aaaa_ssss _n_a_m_e ...
     _uuuu_nnnn_aaaa_llll_iiii_aaaa_ssss _----_aaaa
          The variables given by the list of _n_a_m_es are removed from the _a_l_i_a_s
          list.  In the second form, all alias definitions are removed from
          the current shell execution environment.

     _uuuu_nnnn_llll_iiii_mmmm_iiii_tttt [ _----_hhhh ] _r_e_s_o_u_r_c_e
          This is the Bourne shell version included for backward
          compatibility.  Removes the limitation on _r_e_s_o_u_r_c_e.  If no _r_e_s_o_u_r_c_e
          is specified, then all _r_e_s_o_u_r_c_e limitations are removed.  If ----hhhh is
          given, the corresponding hard limits are removed.  Only the
          superuser can do this. (See lllliiiimmmmiiiitttt above)

     _uuuu_nnnn_ssss_eeee_tttt [ _----_ffff_vvvv ] _n_a_m_e ...     *
          The variables given by the list of _n_a_m_es are unassigned, i.  e.,
          their values and attributes are erased.  Read-only variables cannot
          be unset.  If the flag, _----_vvvv, is set, the names refer to _v_a_r_i_a_b_l_e
          names.  This is the default when no options are specified.  If the
          flag, _----_ffff, is set, the names refer to _f_u_n_c_t_i_o_n names.  Unsetting
          _EEEE_RRRR_RRRR_NNNN_OOOO, _LLLL_IIII_NNNN_EEEE_NNNN_OOOO, _MMMM_AAAA_IIII_LLLL_CCCC_HHHH_EEEE_CCCC_KKKK, _OOOO_PPPP_TTTT_AAAA_RRRR_GGGG, _OOOO_PPPP_TTTT_IIII_NNNN_DDDD, _RRRR_AAAA_NNNN_DDDD_OOOO_MMMM, _SSSS_EEEE_CCCC_OOOO_NNNN_DDDD_SSSS, _TTTT_MMMM_OOOO_UUUU_TTTT,
          and _____ causes removes their special meaning even if they are
          subsequently assigned to.  In some shell invocations, unsetting
          variables not previously set or null returns a value of 0.  (See the
          _CCCC_OOOO_MMMM_PPPP_AAAA_TTTT_IIII_BBBB_IIII_LLLL_IIII_TTTT_YYYY _IIII_SSSS_SSSS_UUUU_EEEE_SSSS section at the end of this document.)

     _wwww_aaaa_iiii_tttt [ _j_o_b ]     *
          Wait for the specified _j_o_b and report its termination status.  If
          _j_o_b is not given all currently active child processes are waited
          for.  The exit status from this command is that of the process
          waited for.  See JJJJoooobbbbssss for a description of the format of _j_o_b.

     _wwww_hhhh_eeee_nnnn_cccc_eeee [ _----_pppp_vvvv ] _n_a_m_e ...
          For each _n_a_m_e, indicate how it is interpreted if used as a command
          name.

          _----_vvvv   produces a more verbose report.





                                                                       PPPPaaaaggggeeee 33338888






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          _----_pppp   does a path search for _n_a_m_e even if name is an alias, a
               function, or a reserved word.

   IIIInnnnvvvvooooccccaaaattttiiiioooonnnn
     If the shell is invoked by _eeee_xxxx_eeee_cccc(2), and the first character of argument
     zero (_$$$$_0000) is _----, the shell is assumed to be a _llll_oooo_gggg_iiii_nnnn shell and commands are
     read from _////_eeee_tttt_cccc_////_pppp_rrrr_oooo_ffff_iiii_llll_eeee and then from either _...._pppp_rrrr_oooo_ffff_iiii_llll_eeee in the current
     directory or _$$$$_HHHH_OOOO_MMMM_EEEE_////_...._pppp_rrrr_oooo_ffff_iiii_llll_eeee, if either file exists.  Next, commands are
     read from the filenamed by performing parameter substitution on the value
     of the environment variable _EEEE_NNNN_VVVV if the file exists.  If the _----_ssss flag is
     not present and _a_r_g is, a path search is performed on the first _a_r_g to
     determine the name of the script to execute.  The script _a_r_g must have
     read permission and any _ssss_eeee_tttt_uuuu_iiii_dddd and _ssss_eeee_tttt_gggg_iiii_dddd settings are ignored.  Commands
     are read as described below; the following flags are interpreted by the
     shell when it is invoked:

     _----_cccc _s_t_r_i_n_g   If the _----_cccc flag is present commands are read from _s_t_r_i_n_g.

     _----_ssss          If the _----_ssss flag is present or if no arguments remain, commands
                 are read from the standard input.  Shell output, except for
                 the output of the Special commands listed above, is written
                 to file descriptor 2.

     _----_iiii          If the _----_iiii flag is present or if the shell input and output
                 are attached to a terminal (as told by _iiii_oooo_cccc_tttt_llll(2)) this shell
                 is _i_n_t_e_r_a_c_t_i_v_e.  In this case TERM is ignored (so that _kkkk_iiii_llll_llll _0000
                 does not kill an interactive shell) and INTR is caught and
                 ignored (so that _wwww_aaaa_iiii_tttt is interruptible).  In all cases, QUIT
                 is ignored by the shell.

     _----_rrrr          If the _----_rrrr flag is present the shell is a restricted shell.

     The remaining flags and arguments are described under the _ssss_eeee_tttt command
     above.

   RRRReeeessssttttrrrriiiicccctttteeeedddd sssshhhh OOOOnnnnllllyyyy
     The restricted _ssss_hhhh is used to set up login names and execution
     environments whose capabilities are more controlled than those of the
     standard shell.  The actions of the restricted _ssss_hhhh are identical to those
     of _ssss_hhhh, except that the following are disallowed:

          Changing directory [see _cccc_dddd(1)]
          Setting the value of _SSSS_HHHH_EEEE_LLLL_LLLL, _EEEE_NNNN_VVVV, or _PPPP_AAAA_TTTT_HHHH
          Specifying path or command names containing _////
          Redirecting output (_>>>>, _>>>>_||||_,,,, _<<<<_>>>>_,,,, and _>>>>_>>>>)

     The restrictions above are enforced after _...._pppp_rrrr_oooo_ffff_iiii_llll_eeee and the _EEEE_NNNN_VVVV files are
     interpreted.

     When a command to be executed is found to be a shell procedure, the
     restricted _ssss_hhhh invokes _ssss_hhhh to execute it.  Thus, it is possible to provide
     to the end-user shell procedures that have access to the full power of



                                                                       PPPPaaaaggggeeee 33339999






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



     the standard shell, while imposing a limited menu of commands; this
     scheme assumes that the end-user does not have write and execute
     permissions in the same directory.

     The net effect of these rules is that the writer of the _...._pppp_rrrr_oooo_ffff_iiii_llll_eeee has
     complete control over user actions, by performing guaranteed setup
     actions and leaving the user in an appropriate directory (probably not
     the login directory).

     The system administrator often sets up a directory of commands (that is,
     _////_uuuu_ssss_rrrr_////_rrrr_bbbb_iiii_nnnn) that can be safely invoked by the restricted _ssss_hhhh.

     WARNING: Since the restricted _ssss_hhhh depends on _...._pppp_rrrr_oooo_ffff_iiii_llll_eeee to set up
     restrictions, and _...._pppp_rrrr_oooo_ffff_iiii_llll_eeee is only interpreted by login shells, allowing
     a restricted _ssss_hhhh user to access the system in a manor that does not invoke
     a login shell will allow the user to bypass these restrictions.  An
     example of this type of access is remote shell (See _rrrr_ssss_hhhh______bbbb_ssss_dddd(1C)).

EEEEXXXXIIIITTTT SSSSTTTTAAAATTTTUUUUSSSS
     Errors detected by the shell, such as syntax errors, cause the shell to
     return a nonzero exit status.  Otherwise, the shell returns the exit
     status of the last command executed (see also the _eeee_xxxx_iiii_tttt command above).
     If the shell is being used non-interactively, execution of the shell file
     is abandoned.  Run time errors detected by the shell are reported by
     printing the command or function name and the error condition.  If the
     line number that the error occurred on is greater than one, the line
     number is also printed in square brackets (_[[[[_]]]]) after the command or
     function name.

     If a command is not found, the exit status is _1111_2222_7777.  If the command name
     is found, but it is not an executable utility, the exit status is _1111_2222_6666.
     Applications that invoke utilities without using the shell should use
     these exit status values to report similar errors.

     If a command fails during word expansion or redirection, its exit status
     is greater than zero.

     Internally, for purposes of deciding if a command exits with a nonzero
     exit status, the shell recognizes the entire status value retrieved for
     the command by the equivalent of the _w_a_i_t() function WEXITSTATUS macro.
     When reporting the exit status with the special parameter ?, the shell
     reports the full eight bits of exit status available.  The exit status of
     a command that terminated because it received a signal is reported as
     greater than _1111_2222_8888_....

FFFFIIIILLLLEEEESSSS
     /etc/passwd
     /etc/profile
     /etc/suid_profile
     $HOME/_....profile
     /tmp/sh*
     /dev/null



                                                                       PPPPaaaaggggeeee 44440000






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



SSSSEEEEEEEE AAAALLLLSSSSOOOO
     emacs(1), cat(1), cd(1), chmod(1), cut(1), echo(1), env(1), newgrp(1M),
     paste(1), stty(1), test(1), umask(1), vi(1), dup(2), exec(2), fork(2),
     ioctl(2), lseek(2), pipe(2), signal(2), ulimit(2), umask(2), wait(2),
     rand(3C), a.out(4), profile(4), environ(5).

     Morris I. Bolsky and David G. Korn, _T_h_e _K_o_r_n_S_h_e_l_l _C_o_m_m_a_n_d _a_n_d _P_r_o_g_r_a_m_m_i_n_g
     _L_a_n_g_u_a_g_e, Prentice Hall, 1989

NNNNOOOOTTTTEEEESSSS
     If a command that is a _t_r_a_c_k_e_d _a_l_i_a_s is executed and then a command with
     the same name is installed in a directory in the search path before the
     directory where the original command was found, the shell continues to
     _eeee_xxxx_eeee_cccc the original command.  Use the _----_tttt option of the _aaaa_llll_iiii_aaaa_ssss command to
     correct this situation.

     Some very old shell scripts contain a _^^^^ as a synonym for the pipe
     character _||||.

     Using the _ffff_cccc builtin command within a compound command causes the whole
     command to disappear from the history file.

     The builtin command _.... _f_i_l_e reads the whole file before any commands are
     executed.  Therefore, _aaaa_llll_iiii_aaaa_ssss and _uuuu_nnnn_aaaa_llll_iiii_aaaa_ssss commands in the file do not apply
     to any functions defined in the file.

     Traps are not processed while a job is waiting for a foreground process.
     Thus, a trap on _CCCC_HHHH_LLLL_DDDD won't be executed until the foreground job
     terminates.

     Prior to IRIX Release 5.0, the _rrrr_ssss_hhhh command invoked the restricted shell.
     This restricted shell command is _////_uuuu_ssss_rrrr_////_llll_iiii_bbbb_////_rrrr_ssss_hhhh and it can be executed by
     using the full pathname.  Beginning with IRIX Release 5.0, the _rrrr_ssss_hhhh
     command is the remote shell.  See _rrrr_ssss_hhhh______bbbb_ssss_dddd(1C).

     Sometimes, particularly when using wildcards, the shell will fail to
     execute a command, and complain with the message
        aaaarrrrgggg lllliiiisssstttt ttttoooooooo lllloooonnnngggg
     This can often be avoided by using multiple commands, the _x_a_r_g_s(1)
     command, or by increasing the nnnnccccaaaarrrrggggssss kernel parameter with the
     _s_y_s_t_u_n_e(1m) command.

CCCCOOOOMMMMPPPPAAAATTTTIIIIBBBBIIIILLLLIIIITTTTYYYY IIIISSSSSSSSUUUUEEEESSSS
     To retain some backward compatibility to the Bourne shell, certain Korn
     shell features are controlled by how the shell is invoked and/or the
     current value of the environment variable ______XXXX_PPPP_GGGG.

     When the shell is invoked as _""""_ssss_hhhh_"""", the following features are performed
     only when the current value of the ______XXXX_PPPP_GGGG variable is equal to 1 (one):

          - command substitution of the form "$( command )"
          - arithmetic expression of the form "$(( expression ))"



                                                                       PPPPaaaaggggeeee 44441111






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



          - tilde expansion of pathnames
          - unsetting variables, not previously set or null, returns 0


     When the shell is invoked as _""""_ssss_hhhh_"""" and the current value of the ______XXXX_PPPP_GGGG
     environment variable is not equal to 1 (one), the special positional
     parameter $0, within a function call, is the name of the function.
     Otherwise, it is the name of the invoking shell script.

     When the shell is not invoked as _""""_ssss_hhhh_"""" and the real and effective uid and
     gid differ, the effective uid and gid are set to the real uid and gid.

     With all invocations of the shell, when the current value of the ______XXXX_PPPP_GGGG
     environment variable is equal to 1 (one), the _----_nnnn option of the builtin
     _eeee_cccc_hhhh_oooo command does not suppress the terminating newline and is treated as
     part of the output string.

     Additional incompatibilities are listed below and can be found in the
     Appendix of the _""""_TTTT_hhhh_eeee _KKKK_oooo_rrrr_nnnn_ssss_hhhh_eeee_llll_llll _CCCC_oooo_mmmm_mmmm_aaaa_nnnn_dddd _aaaa_nnnn_dddd _PPPP_rrrr_oooo_gggg_rrrr_aaaa_mmmm_mmmm_iiii_nnnn_gggg _LLLL_aaaa_nnnn_gggg_uuuu_aaaa_gggg_eeee_"""" _((((_BBBB_oooo_llll_ssss_kkkk_yyyy
     _&&&& _KKKK_oooo_rrrr_nnnn_;;;; _PPPP_rrrr_eeee_nnnn_tttt_iiii_cccc_eeee _HHHH_aaaa_llll_llll_))))

     The Korn shell is more restrictive with field comparisons in the builtin
     _tttt_eeee_ssss_tttt command:

          _[[[[ _""""_1111_0000_2222_4444_0000 _ffff_iiii_llll_eeee_nnnn_aaaa_mmmm_eeee_"""" _----_gggg_eeee _1111_0000_2222_4444_0000 _]]]]

     is accepted by the Bourne shell whereas the Korn shell gives a syntax
     error.

     The Korn shell _kkkk_iiii_llll_llll builtin command now handles the special process
     number (-1) for all process owned by the user.  (See the SSSSppppeeeecccciiiiaaaallll CCCCoooommmmmmmmaaaannnnddddssss
     section.)

     The _ffff_aaaa_llll_ssss_eeee command is a builtin for the Korn shell and cannot be defined
     as a function.

     The _cccc_hhhh_dddd_iiii_rrrr is a builtin alias to the _cccc_dddd command. When shell is invoked as
     "ksh", this alias is removed allowing _cccc_hhhh_dddd_iiii_rrrr to be defined as a function.
     When shell is invoked as "sh", this can also be accomplished by
     unaliasing _cccc_hhhh_dddd_iiii_rrrr and then defining it as a function.

     Some Korn shell internal variables are typeset as integers and setting
     them to non-numeric values will cause "bad number" error messages. They
     include _EEEE_RRRR_RRRR_NNNN_OOOO_,,,, _LLLL_IIII_NNNN_EEEE_NNNN_OOOO_,,,, _MMMM_AAAA_IIII_LLLL_CCCC_HHHH_EEEE_CCCC_KKKK_,,,, _OOOO_PPPP_TTTT_IIII_NNNN_DDDD_,,,, _PPPP_PPPP_IIII_DDDD_,,,, _RRRR_AAAA_NNNN_DDDD_OOOO_MMMM_,,,, _SSSS_EEEE_CCCC_OOOO_NNNN_DDDD_SSSS _aaaa_nnnn_dddd
     _TTTT_MMMM_OOOO_UUUU_TTTT_....

     The Korn shell evaluates variable assignment lists before I/O redirection
     unlike the Bourne shell in which order does not matter.

     The Bourne shell (bsh) has been modified to allow fullpath calls of
     Bourne shell builtins using the builtin name POSIX links to
     /sbin/builtin_exec.



                                                                       PPPPaaaaggggeeee 44442222






sssshhhh((((1111))))                                                                    sssshhhh((((1111))))



IIIINNNNTTTTEEEERRRRNNNNAAAATTTTIIIIOOOONNNNAAAALLLLIIIIZZZZAAAATTTTIIIIOOOONNNN
     The shell accepts multibyte input for command line args, file names,
     environment variable names and values, variable arrays, function names,
     history files and shell scripts. Multibyte sequences accepted for the
     _iiii_ssss_pppp_hhhh_oooo_nnnn_oooo_gggg_rrrr_aaaa_mmmm_((((_)))) and _iiii_ssss_iiii_dddd_eeee_oooo_gggg_rrrr_aaaa_mmmm_((((_)))) subroutines are also allowed.

     _NNNN_oooo_tttt_eeee_:::: The _eeee_mmmm_aaaa_cccc_ssss line editing feature is currently supported only with the
     default _CCCC/_PPPP_OOOO_SSSS_IIII_XXXX locale.

     _NNNN_oooo_tttt_eeee_:::: Changing the _LLLL_AAAA_NNNN_GGGG value during a shell session can produce
     undefined results when accessing e.g. variables created under a different
     locale.











































                                                                       PPPPaaaaggggeeee 44443333



